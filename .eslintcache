[{"/Users/billyplant/Documents/the_odin_project/battleship/src/index.js":"1","/Users/billyplant/Documents/the_odin_project/battleship/src/App.js":"2","/Users/billyplant/Documents/the_odin_project/battleship/src/game/player.js":"3","/Users/billyplant/Documents/the_odin_project/battleship/src/game/gameboard.js":"4","/Users/billyplant/Documents/the_odin_project/battleship/src/game/ship.js":"5","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayRouter.js":"6","/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashText.js":"7","/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashInput.js":"8","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayVsAI.js":"9","/Users/billyplant/Documents/the_odin_project/battleship/src/components/BoatPlacer.js":"10","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameLoopVsAI.js":"11","/Users/billyplant/Documents/the_odin_project/battleship/src/game/getRandomNumber.js":"12","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlacingShips.js":"13","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlayer.js":"14","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardEnemy.js":"15","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardTile.js":"16","/Users/billyplant/Documents/the_odin_project/battleship/src/game/tile.js":"17"},{"size":241,"mtime":1610642769762,"results":"18","hashOfConfig":"19"},{"size":2488,"mtime":1610955289745,"results":"20","hashOfConfig":"19"},{"size":6527,"mtime":1610955289751,"results":"21","hashOfConfig":"19"},{"size":3750,"mtime":1610955289750,"results":"22","hashOfConfig":"19"},{"size":1040,"mtime":1610708990718,"results":"23","hashOfConfig":"19"},{"size":925,"mtime":1610955289746,"results":"24","hashOfConfig":"19"},{"size":473,"mtime":1610832884077,"results":"25","hashOfConfig":"19"},{"size":564,"mtime":1610832884075,"results":"26","hashOfConfig":"19"},{"size":984,"mtime":1610955289747,"results":"27","hashOfConfig":"19"},{"size":2029,"mtime":1610832884068,"results":"28","hashOfConfig":"19"},{"size":6044,"mtime":1610955289747,"results":"29","hashOfConfig":"19"},{"size":102,"mtime":1610832884080,"results":"30","hashOfConfig":"19"},{"size":3542,"mtime":1610832884072,"results":"31","hashOfConfig":"19"},{"size":1328,"mtime":1610832884073,"results":"32","hashOfConfig":"19"},{"size":2169,"mtime":1610832884072,"results":"33","hashOfConfig":"19"},{"size":1297,"mtime":1610832884073,"results":"34","hashOfConfig":"19"},{"size":0,"mtime":1610955289751,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yacagj",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/billyplant/Documents/the_odin_project/battleship/src/index.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/App.js",["74","75"],"/Users/billyplant/Documents/the_odin_project/battleship/src/game/player.js",[],["76","77"],"/Users/billyplant/Documents/the_odin_project/battleship/src/game/gameboard.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/game/ship.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayRouter.js",["78"],"import React, {useState} from 'react';\nimport {HumanPlayer, ComputerPlayer} from '../game/player';\nimport GameDisplayVsAI from './GameDisplayVsAI';\n\nfunction GameDisplayRouter(props) {\n  const boats = [{name: 'Carrier', length: 5},\n  {name: 'Battleship', length: 4},\n  {name: 'Submarine', length: 3},\n  {name: 'Cruiser', length: 3},\n  {name: 'Destroyer', length: 2}];\n\n  let gameModeToDisplay;\n  let playerOne = HumanPlayer(props.p1Name, 10);\n  let playerTwo;\n  if(props.opponent === 'ai') {\n    playerTwo = ComputerPlayer(props.p2Name, 10);\n    gameModeToDisplay = <GameDisplayVsAI \n                         playerOne={playerOne} \n                         playerTwo={playerTwo}\n                         boats={boats} />\n  } else {\n    playerTwo = HumanPlayer(props.p2Name, 10);\n    //gameModeToDisplay = <GameVsPlayerDisplay />\n  }\n\n  return(\n    <>\n      {gameModeToDisplay}\n    </>\n  )\n}\n\nexport default GameDisplayRouter;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashText.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashInput.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayVsAI.js",["79","80"],"import React, {useState, useEffect} from 'react';\nimport BoatPlacer from './BoatPlacer';\nimport GameLoopVsAI from './GameLoopVsAI';\n\nfunction GameDisplayVsAI(props) {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  let toDisplay = '';\n\n  useEffect(() => {\n    props.playerTwo.fillGameboard(props.boats);\n  }, [])\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <BoatPlacer text={\"You're in charge, Commander \" + props.playerOne.getName() + \"! Where shall we position our ships?\"}\n                               gameboard={props.playerOne.getGameboard()}\n                               setScreen={() => setCurrentScreen(1)}\n                               boats={props.boats}/>\n      break;\n    case 1: \n      toDisplay = <GameLoopVsAI playerOne={props.playerOne}\n                                playerTwo={props.playerTwo} />\n    default:\n      break;\n  }\n\n  return(\n    <>\n      <div>\n        {toDisplay}\n      </div>\n    </>\n  )\n}\n\nexport default GameDisplayVsAI;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/BoatPlacer.js",["81","82","83"],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameLoopVsAI.js",["84"],"import React, {useState, useEffect} from 'react';\nimport BoardPlayer from './boards/BoardPlayer';\nimport BoardEnemy from './boards/BoardEnemy';\nimport getRandomNumber from '../game/getRandomNumber';\n\nfunction GameLoopVsAI(props) {\n  let [playerAttacking, setPlayerAttacking] = useState(1);\n  let [isEnabled, setIsEnabled] = useState(true);\n  let [gameFinished, setGameFinished] = useState(false);\n  let [text, setText] = useState([<p>{`Righty ho Commander ${props.playerOne.getName()}, it's time to show these muppets what we're made of. Good luck, and don't let us down!`}</p>])\n  let [consecutiveMisses, setConsecutiveMisses]= useState(0);\n  let [enemyConsecutiveMisses, setEnemyConsecutiveMisses]= useState(0);\n\n  function addTextToLog(textToAdd, classes='', bigText = false) {\n    let newTextLog = text;\n    if(bigText) {\n      newTextLog.unshift(<h3 className={classes}>{textToAdd}</h3>);\n    } else {\n      newTextLog.unshift(<p className={classes}>{textToAdd}</p>);\n    }    \n    setText(newTextLog);\n  }\n\n  // When playerAttacking changes, tell the AI to make its next shot, and add relevant message to the log\n  useEffect(() => {\n    if(playerAttacking === 2 && !gameFinished) {\n      setIsEnabled(false);\n      setTimeout(() => {\n        let attackedCoords = props.playerTwo.attackGameboard(props.playerOne.getGameboard());\n        if(props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).isOccupied()) {\n          let ship = props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).getOccupyingShip();\n          if(ship.isSunk()) {\n            addTextToLog(`Bugger, the enemy sunk our ${ship.getName()}!`, 'warning');\n          } else {\n            let choice = getRandomNumber(0, 50);\n            (choice > 0 && choice < 24) ? addTextToLog(`Ouch, the enemy hit our ${ship.getName()}!`) : addTextToLog(`Oof, they've landed a shot on our ${ship.getName()}!`);\n          }          \n          setEnemyConsecutiveMisses(0);\n        } else {\n          if(enemyConsecutiveMisses === 1) { // 2 times\n            addTextToLog(`Our pitiful enemy has missed us twice in a row!`);\n          } else if(enemyConsecutiveMisses === 3) { // 4 times\n            addTextToLog(`Commander ${props.playerTwo.getName()} is laughable, that's 4 times they've missed us now!`);\n          } else if(enemyConsecutiveMisses === 7) { // 8 times\n            addTextToLog(`Oh my... could it be a record? Commander ${props.playerTwo.getName()} has missed us 8 times in a row!`);\n          } else if(enemyConsecutiveMisses === 9) { // 10 times\n            addTextToLog(`OK, nope, that's the record. Ten enemy shots in a row, and not one of them hit us! Awkward!`);\n          }        \n          setEnemyConsecutiveMisses(enemyConsecutiveMisses + 1);\n        }\n\n        setIsEnabled(true);\n        if(props.playerOne.getGameboard().allShipsSunk()) {\n          addTextToLog(`We lost the battle! Commander ${props.playerTwo.getName()} has blown our ships to pieces. Let's give it another go?`, 'game-log-loss', true);\n          setIsEnabled(false);\n          setGameFinished(true);\n        } else {\n          setPlayerAttacking(1);\n        }        \n      }, 500);      \n    }\n  }, [playerAttacking])\n\n  // Allows player to make attack against the AI, and adds relevant message to the log\n  function enemyReceivesAttack(x, y) {\n    if(props.playerTwo.getGameboard().getTile(x, y).isOccupied()) {\n      let ship = props.playerTwo.getGameboard().getTile(x, y).getOccupyingShip();\n      if(ship.isSunk()) {\n        addTextToLog(`Excellent work! We sunk their ${ship.getName()}!`, 'highlight');\n      } else {\n        let choice = getRandomNumber(0, 50);\n        (choice > 0 && choice < 24) ? addTextToLog(`Great shot! We hit their ${ship.getName()}!`) : addTextToLog(`Solid work! We landed a shot on their ${ship.getName()}!`);\n      }        \n      setConsecutiveMisses(0);\n    } else {\n      if(consecutiveMisses === 2) { // 3 times\n        addTextToLog(`We've missed the enemy three times in a row, get it together!`);\n      } else if(consecutiveMisses === 4) { // 5 times\n        addTextToLog(`You're not having much luck, are you Commander ${props.playerOne.getName()}? C'mon!`);\n      } else if(consecutiveMisses === 6) { // 7 times\n        addTextToLog(`7 misses in a row, Commander ${props.playerOne.getName()}? Quite frankly I expected better of you!`);\n      } else if(consecutiveMisses === 9) { // 10 times\n        addTextToLog(`Out of the 100 tiles on this board, you've somehow just missed a tenth of them in a row with no hits landed in between. I honestly have no words.`);\n      } else if(consecutiveMisses === 14) { // 15 times\n        addTextToLog(`15 consecutive shots. 15 consecutive misses. Dare I ask... Are you even trying to win, Commander ${props.playerOne.getName()}?!`);\n      }       \n      setConsecutiveMisses(consecutiveMisses + 1); \n    }\n\n    if(props.playerTwo.getGameboard().allShipsSunk()) {\n      addTextToLog(`WE WON THE BATTLE! We've sunk all of poxy ${props.playerTwo.getName()}'s ships! You made it look easy... Jolly good job, Commander ${props.playerOne.getName()}!`, 'game-log-win', true);\n      setGameFinished(true);\n      setIsEnabled(false);\n    } else {\n      setPlayerAttacking(2);\n    }\n  }\n\n  return(\n    <>\n      <div className=\"forty\">\n        <BoardPlayer gameboard={props.playerOne.getGameboard()}\n                     isEnabled={isEnabled}/>\n        <p className=\"white\">Commander {props.playerOne.getName()}</p>\n      </div>\n      <div className=\"twenty game-log\">\n        <h3>Communications</h3>\n        {text !== undefined ? text.map(text => text) : null}\n        {gameFinished ? <button className=\"play-again\">Play again</button> : null}\n      </div>\n      <div className=\"forty\">\n        <BoardEnemy gameboard={props.playerTwo.getGameboard()}\n                    isEnabled={isEnabled}\n                    receiveAttack={enemyReceivesAttack}/>\n        <p className=\"white\">Commander {props.playerTwo.getName()}</p>\n      </div>\n    </>\n  )\n}\n\nexport default GameLoopVsAI;","/Users/billyplant/Documents/the_odin_project/battleship/src/game/getRandomNumber.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlacingShips.js",["85","86"],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlayer.js",["87","88","89","90"],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardEnemy.js",["91","92"],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardTile.js",["93","94","95"],"/Users/billyplant/Documents/the_odin_project/battleship/src/game/tile.js",[],{"ruleId":"96","severity":1,"message":"97","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":26,"column":3,"nodeType":"102","messageId":"103","endLine":62,"endColumn":4},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"96","severity":1,"message":"108","line":1,"column":16,"nodeType":"98","messageId":"99","endLine":1,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":11,"column":6,"nodeType":"111","endLine":11,"endColumn":8,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":24,"column":5,"nodeType":"115","messageId":"116","endLine":25,"endColumn":13},{"ruleId":"96","severity":1,"message":"117","line":9,"column":7,"nodeType":"98","messageId":"99","endLine":9,"endColumn":25},{"ruleId":"109","severity":1,"message":"118","line":19,"column":6,"nodeType":"111","endLine":19,"endColumn":8,"suggestions":"119"},{"ruleId":"109","severity":1,"message":"120","line":38,"column":6,"nodeType":"111","endLine":38,"endColumn":21,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"122","line":67,"column":6,"nodeType":"111","endLine":67,"endColumn":23,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"124","line":12,"column":6,"nodeType":"111","endLine":12,"endColumn":8,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"124","line":16,"column":6,"nodeType":"111","endLine":16,"endColumn":37,"suggestions":"126"},{"ruleId":"96","severity":1,"message":"127","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":14},{"ruleId":"96","severity":1,"message":"128","line":7,"column":16,"nodeType":"98","messageId":"99","endLine":7,"endColumn":25},{"ruleId":"109","severity":1,"message":"124","line":12,"column":6,"nodeType":"111","endLine":12,"endColumn":8,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"124","line":16,"column":6,"nodeType":"111","endLine":16,"endColumn":23,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"124","line":11,"column":6,"nodeType":"111","endLine":11,"endColumn":8,"suggestions":"131"},{"ruleId":"109","severity":1,"message":"124","line":15,"column":6,"nodeType":"111","endLine":15,"endColumn":31,"suggestions":"132"},{"ruleId":"96","severity":1,"message":"108","line":1,"column":16,"nodeType":"98","messageId":"99","endLine":1,"endColumn":24},{"ruleId":"133","severity":1,"message":"134","line":30,"column":44,"nodeType":"135","endLine":30,"endColumn":83},{"ruleId":"133","severity":1,"message":"134","line":31,"column":45,"nodeType":"135","endLine":31,"endColumn":80},"no-unused-vars","'playerTwoName' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-native-reassign",["136"],"no-negated-in-lhs",["137"],"'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.boats' and 'props.playerTwo'. Either include them or remove the dependency array.","ArrayExpression",["138"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'spaceEventListener' is defined but never used.","React Hook useEffect has missing dependencies: 'handleSpaceKey' and 'props.boats'. Either include them or remove the dependency array.",["139"],"React Hook useEffect has a missing dependency: 'handleSpaceKey'. Either include it or remove the dependency array.",["140"],"React Hook useEffect has missing dependencies: 'addTextToLog', 'enemyConsecutiveMisses', 'gameFinished', 'props.playerOne', and 'props.playerTwo'. Either include them or remove the dependency array. You can also do a functional update 'setEnemyConsecutiveMisses(e => ...)' if you only need 'enemyConsecutiveMisses' in the 'setEnemyConsecutiveMisses' call.",["141"],"React Hook useEffect has a missing dependency: 'redrawBoard'. Either include it or remove the dependency array.",["142"],["143"],"'placed' is assigned a value but never used.","'setPlaced' is assigned a value but never used.",["144"],["145"],["146"],["147"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"156","fix":"160"},{"desc":"161","fix":"162"},{"desc":"156","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [props.boats, props.playerTwo]",{"range":"166","text":"167"},"Update the dependencies array to be: [handleSpaceKey, props.boats]",{"range":"168","text":"169"},"Update the dependencies array to be: [eventListener, handleSpaceKey]",{"range":"170","text":"171"},"Update the dependencies array to be: [addTextToLog, enemyConsecutiveMisses, gameFinished, playerAttacking, props.playerOne, props.playerTwo]",{"range":"172","text":"173"},"Update the dependencies array to be: [redrawBoard]",{"range":"174","text":"175"},"Update the dependencies array to be: [placed, props.placingShipAxis, redrawBoard]",{"range":"176","text":"177"},{"range":"178","text":"175"},"Update the dependencies array to be: [props.isEnabled, redrawBoard]",{"range":"179","text":"180"},{"range":"181","text":"175"},"Update the dependencies array to be: [placed, props.isEnabled, redrawBoard]",{"range":"182","text":"183"},[320,322],"[props.boats, props.playerTwo]",[572,574],"[handleSpaceKey, props.boats]",[999,1014],"[eventListener, handleSpaceKey]",[3361,3378],"[addTextToLog, enemyConsecutiveMisses, gameFinished, playerAttacking, props.playerOne, props.playerTwo]",[308,310],"[redrawBoard]",[357,388],"[placed, props.placingShipAxis, redrawBoard]",[302,304],[351,368],"[props.isEnabled, redrawBoard]",[267,269],[316,341],"[placed, props.isEnabled, redrawBoard]"]
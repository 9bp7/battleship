[{"/Users/billyplant/Documents/the_odin_project/battleship/src/index.js":"1","/Users/billyplant/Documents/the_odin_project/battleship/src/App.js":"2","/Users/billyplant/Documents/the_odin_project/battleship/src/game/player.js":"3","/Users/billyplant/Documents/the_odin_project/battleship/src/game/gameboard.js":"4","/Users/billyplant/Documents/the_odin_project/battleship/src/game/ship.js":"5","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayRouter.js":"6","/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashText.js":"7","/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashInput.js":"8","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayVsAI.js":"9","/Users/billyplant/Documents/the_odin_project/battleship/src/components/BoatPlacer.js":"10","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameLoopVsAI.js":"11","/Users/billyplant/Documents/the_odin_project/battleship/src/game/getRandomNumber.js":"12","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlacingShips.js":"13","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlayer.js":"14","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardEnemy.js":"15","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardTile.js":"16","/Users/billyplant/Documents/the_odin_project/battleship/src/game/tile.js":"17","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayVsHuman.js":"18","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameLoopVsHuman.js":"19"},{"size":241,"mtime":1610642769762,"results":"20","hashOfConfig":"21"},{"size":4719,"mtime":1610966160613,"results":"22","hashOfConfig":"21"},{"size":8245,"mtime":1610955338288,"results":"23","hashOfConfig":"21"},{"size":3290,"mtime":1610955338287,"results":"24","hashOfConfig":"21"},{"size":1040,"mtime":1610708990718,"results":"25","hashOfConfig":"21"},{"size":1244,"mtime":1610966224285,"results":"26","hashOfConfig":"21"},{"size":473,"mtime":1610832884077,"results":"27","hashOfConfig":"21"},{"size":939,"mtime":1610965327911,"results":"28","hashOfConfig":"21"},{"size":1056,"mtime":1610955338284,"results":"29","hashOfConfig":"21"},{"size":2183,"mtime":1610966438575,"results":"30","hashOfConfig":"21"},{"size":6328,"mtime":1610963956557,"results":"31","hashOfConfig":"21"},{"size":102,"mtime":1610832884080,"results":"32","hashOfConfig":"21"},{"size":3558,"mtime":1610966709015,"results":"33","hashOfConfig":"21"},{"size":1328,"mtime":1610832884073,"results":"34","hashOfConfig":"21"},{"size":2169,"mtime":1610832884072,"results":"35","hashOfConfig":"21"},{"size":1297,"mtime":1610832884073,"results":"36","hashOfConfig":"21"},{"size":507,"mtime":1610955338289,"results":"37","hashOfConfig":"21"},{"size":1356,"mtime":1610966804183,"results":"38","hashOfConfig":"21"},{"size":5821,"mtime":1610971451510,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1k8w3yx",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"42"},"/Users/billyplant/Documents/the_odin_project/battleship/src/index.js",[],["91","92"],"/Users/billyplant/Documents/the_odin_project/battleship/src/App.js",["93"],"import './App.css';\nimport './assets/sea.jpg'\nimport React, {useState} from 'react';\nimport SplashText from './components/splash/SplashText';\nimport SplashInput from './components/splash/SplashInput';\nimport GameDisplayRouter from './components/GameDisplayRouter';\n\nfunction App() {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  const [playerOneName, setPlayerOneName] = useState('Badman');\n  const [playerTwoName, setPlayerTwoName] = useState('Bigboy');\n  const [playerOnePreservedName, savePlayerOnePreservedName] = useState('');\n  const [playerTwoPreservedName, savePlayerTwoPreservedName] = useState('');\n  let toDisplay = '';\n\n  function setName(player, name) {\n    if(player === 1 && name.length > 0) {\n      setPlayerOneName(name);\n      savePlayerOnePreservedName(name);\n    } else if(player === 2 && name.length > 0) {\n      setPlayerTwoName(name);\n      savePlayerTwoPreservedName(name);\n    }\n  }\n\n  function setScreen(setTo) {\n    setCurrentScreen(setTo);\n  }\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <SplashText textToShow=\"Welcome to Battleship. Ready to start?\"\n                              btn1Text=\"Begin Mission\"\n                              btn1Func={() => setScreen(1)} />\n      break;\n    \n    case 1:\n      toDisplay = <SplashText textToShow=\"Who will you be fighting today?\"\n                              btn1Text=\"Commander Puter (AI)\"\n                              btn1Func={() => setScreen(2)}\n                              btn2Text=\"A Friend (2-Player)\"\n                              btn2Func={() => setScreen(5)} />\n      break;\n\n    // Route: Playing AI\n    case 2:\n      toDisplay = <SplashText textToShow=\"Roger that, let's blow Commander Puter's fleet to smithereens!\"\n                              btn1Text=\"We'll teach him a bloody good lesson!\"\n                              btn1Func={() => setScreen(3)} />\n      break;\n\n    case 3:\n      toDisplay = <SplashInput textToShow=\"That we will, sir. But before we sail off, remind me of your name...\"\n                               inputPlaceholder=\"Your name, sir\"\n                               inputInitialValue={playerOnePreservedName}\n                               submitText=\"Battle\"\n                               submitFunc={(inputValue) => {\n                                 setScreen(4);\n                                 setName(1, inputValue);\n                               }} />\n      break;\n\n    case 4:\n      toDisplay = <GameDisplayRouter opponent=\"ai\"\n                                     p1Name={playerOneName} \n                                     p2Name=\"Puter\" \n                                     globalSetScreen={setScreen}\n                                     />\n      break;\n    \n    // Route: Playing Human\n    case 5:\n      toDisplay = <SplashText textToShow=\"Right, I want a clean fight... Joking, go blow each other's ships to smithereens.\"\n                              btn1Text=\"Let's 'ave it!\"\n                              btn1Func={() => setScreen(6)} />\n      break;\n\n    case 6:\n      toDisplay = <SplashInput textToShow=\"Okay, who's up first and what shall we call you?\"\n                               inputPlaceholder=\"P1's name, sir\"\n                               inputInitialValue={playerOnePreservedName}\n                               submitText=\"Battle\"\n                               submitFunc={(e, inputValue) => {\n                                 e.preventDefault();\n                                 setScreen(7);\n                                 setName(1, inputValue);\n                               }} />\n      break;\n\n    case 7:\n      toDisplay = <SplashInput textToShow=\"And for the second Commander, remind me of your name?\"\n                                inputPlaceholder=\"P2's name, sir\"\n                                inputInitialValue={playerTwoPreservedName}\n                                submitText=\"Battle\"\n                                submitFunc={(e, inputValue) => {\n                                  e.preventDefault();\n                                  setScreen(8);\n                                  setName(2, inputValue);\n                                }} />\n      break;\n    \n    case 8:\n      toDisplay = <GameDisplayRouter opponent=\"human\"\n                                      p1Name={playerOneName} \n                                      p2Name={playerTwoName} \n                                      globalSetScreen={setScreen}\n                                      />\n      break;\n  }\n\n  return(\n    <div className=\"App\">\n      <div className=\"wrap\">\n        { currentScreen < 4 \n          ? <h1>Battleship</h1>\n          : <h2>Battleship</h2> }\n        {toDisplay}\n      </div>\n    </div>    \n  );\n}\n\nexport default App;\n","/Users/billyplant/Documents/the_odin_project/battleship/src/game/player.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/game/gameboard.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/game/ship.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayRouter.js",["94"],"import React, {useState} from 'react';\nimport {HumanPlayer, ComputerPlayer} from '../game/player';\nimport GameDisplayVsAI from './GameDisplayVsAI';\nimport GameDisplayVsHuman from './GameDisplayVsHuman';\n\nfunction GameDisplayRouter(props) {\n  const boats = [{name: 'Carrier', length: 5},\n  {name: 'Battleship', length: 4},\n  {name: 'Submarine', length: 3},\n  {name: 'Cruiser', length: 3},\n  {name: 'Destroyer', length: 2}];\n\n  let gameModeToDisplay;\n  let playerOne = HumanPlayer(props.p1Name, 10);\n  let playerTwo;\n  if(props.opponent === 'ai') {\n    playerTwo = ComputerPlayer(props.p2Name, 10);\n    gameModeToDisplay = <GameDisplayVsAI \n                         playerOne={playerOne} \n                         playerTwo={playerTwo}\n                         boats={boats}\n                         globalSetScreen={props.globalSetScreen}/>\n  } else {\n    playerTwo = HumanPlayer(props.p2Name, 10);\n    gameModeToDisplay = <GameDisplayVsHuman\n                          playerOne={playerOne} \n                          playerTwo={playerTwo}\n                          boats={boats}\n                          globalSetScreen={props.globalSetScreen} />\n  }\n\n  return(\n    <>\n      {gameModeToDisplay}\n    </>\n  )\n}\n\nexport default GameDisplayRouter;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashText.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/splash/SplashInput.js",["95","96"],"import React, {useState, useEffect} from 'react';\n\nfunction SplashInput(props) {\n  let [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if(props.inputInitialValue && props.inputInitialValue.length > 0) {\n      setInputValue(props.inputInitialValue);\n    }\n  }, [])\n\n  useEffect(() => {\n    if(props.inputInitialValue && props.inputInitialValue.length > 0) {\n      setInputValue(props.inputInitialValue);\n    } else {\n      setInputValue('');\n    }\n  }, [props.textToShow])\n\n  function handleChange(e) {\n    setInputValue(e.target.value);\n  }\n\n  return(\n    <>\n      <div>\n        <p>{props.textToShow}</p>\n        <form onSubmit={e => props.submitFunc(e, inputValue)}>\n          <input type=\"text\" placeholder={props.inputPlaceholder} onChange={e => handleChange(e)} value={inputValue}/>\n          <input type=\"submit\" value={props.submitText} />\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default SplashInput;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayVsAI.js",["97","98"],"import React, {useState, useEffect} from 'react';\nimport BoatPlacer from './BoatPlacer';\nimport GameLoopVsAI from './GameLoopVsAI';\n\nfunction GameDisplayVsAI(props) {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  let toDisplay = '';\n\n  useEffect(() => {\n    props.playerTwo.fillGameboard(props.boats);\n  }, [])\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <BoatPlacer text={\"You're in charge, Commander \" + props.playerOne.getName() + \"! Where shall we position our ships?\"}\n                               gameboard={props.playerOne.getGameboard()}\n                               setScreen={() => setCurrentScreen(1)}\n                               boats={props.boats}/>\n      break;\n    case 1: \n      toDisplay = <GameLoopVsAI playerOne={props.playerOne}\n                                playerTwo={props.playerTwo}\n                                globalSetScreen={props.globalSetScreen} />\n    default:\n      break;\n  }\n\n  return(\n    <>\n      <div>\n        {toDisplay}\n      </div>\n    </>\n  )\n}\n\nexport default GameDisplayVsAI;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/BoatPlacer.js",["99","100"],"import React, {useState, useEffect} from 'react';\nimport BoardPlacingShips from './boards/BoardPlacingShips';\n\nfunction BoatPlacer(props) {\n  let [boatsToPlace, setBoatsToPlace] = useState();\n  let [currentBoat, setCurrentBoat] = useState(0);\n  let [axis, setAxis] = useState('y');\n  let [eventListener, setEventListener] = useState(false);\n\n  useEffect(() => {\n    let boats = props.boats;\n    setBoatsToPlace([...boats]);\n\n    return(() => {\n      window.removeEventListener(\"keyup\", handleSpaceKey);\n      setEventListener(false);\n    })\n  }, []);\n\n  function handleSpaceKey(e) {\n    if(e.keyCode === 32) {\n      if(axis === 'x') {\n        setAxis('y');\n      } else if(axis === 'y') {\n        setAxis('x');\n      }\n      window.removeEventListener('keyup', handleSpaceKey);\n      setEventListener(false);\n    }  \n  }\n\n  useEffect(() => {\n    if(eventListener === false) {\n      setEventListener(true);\n      window.addEventListener('keyup', handleSpaceKey);\n    }\n  }, [eventListener]);\n\n  // If text changes, assume there is another player who needs to place boats\n  // And reset the necessary variables\n  useEffect(() => {\n    setCurrentBoat(0);\n  }, [props.text])\n\n  function placeShip(x, y) {\n    if(currentBoat < boatsToPlace.length) {\n      if(props.gameboard.positionIsLegal()) {\n        if((currentBoat + 1) < boatsToPlace.length) {\n          setCurrentBoat(currentBoat + 1);  \n        } else {\n          props.setScreen();\n        }               \n      }      \n    }\n  }\n\n  return(\n    <>\n      <div>\n        <p className=\"smaller-p\">{props.text}</p>\n        { boatsToPlace !== undefined\n        ? <>\n            <p className=\"smaller-p\">Currently Placing: {boatsToPlace[currentBoat].name}</p>\n            <BoardPlacingShips gameboard={props.gameboard}\n                placingShipLength={boatsToPlace[currentBoat].length}\n                placingShipAxis={axis} \n                shipName={boatsToPlace[currentBoat].name}\n                placeShipFunc={placeShip}\n                changeAxisFunc={() => axis === 'x' ? setAxis('y') : setAxis('x')}\n                />\n          </>\n        : <p>Setting up board...</p>}\n      </div>\n    </>\n  )\n}\n\nexport default BoatPlacer;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameLoopVsAI.js",["101"],"import React, {useState, useEffect} from 'react';\nimport BoardPlayer from './boards/BoardPlayer';\nimport BoardEnemy from './boards/BoardEnemy';\nimport getRandomNumber from '../game/getRandomNumber';\n\nfunction GameLoopVsAI(props) {\n  let [playerAttacking, setPlayerAttacking] = useState(1);\n  let [isEnabled, setIsEnabled] = useState(true);\n  let [gameFinished, setGameFinished] = useState(false);\n  let [text, setText] = useState([<p>{`Righty ho Commander ${props.playerOne.getName()}, it's time to show these muppets what we're made of. Good luck, and don't let us down!`}</p>])\n  let [consecutiveMisses, setConsecutiveMisses]= useState(0);\n  let [enemyConsecutiveMisses, setEnemyConsecutiveMisses]= useState(0);\n\n  function addTextToLog(textToAdd, classes='', bigText = false) {\n    let newTextLog = text;\n    if(bigText) {\n      newTextLog.unshift(<h3 className={classes}>{textToAdd}</h3>);\n    } else {\n      newTextLog.unshift(<p className={classes}>{textToAdd}</p>);\n    }    \n    if(newTextLog.length > 10) {\n      newTextLog.pop();\n    }\n    setText(newTextLog);\n  }\n\n  // When playerAttacking changes, tell the AI to make its next shot, and add relevant message to the log\n  useEffect(() => {\n    if(playerAttacking === 2 && !gameFinished) {\n      setIsEnabled(false);\n      setTimeout(() => {\n        let attackedCoords = props.playerTwo.attackGameboard(props.playerOne.getGameboard());\n        if(props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).isOccupied()) {\n          let ship = props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).getOccupyingShip();\n          if(ship.isSunk()) {\n            addTextToLog(`Bugger, the enemy sunk our ${ship.getName()}!`, 'warning');\n          } else {\n            let choice = getRandomNumber(0, 50);\n            (choice > 0 && choice < 24) ? addTextToLog(`Ouch, the enemy hit our ${ship.getName()}!`) : addTextToLog(`Oof, they've landed a shot on our ${ship.getName()}!`);\n          }          \n          setEnemyConsecutiveMisses(0);\n        } else {\n          if(enemyConsecutiveMisses === 1) { // 2 times\n            addTextToLog(`Our pitiful enemy has missed us twice in a row!`);\n          } else if(enemyConsecutiveMisses === 3) { // 4 times\n            addTextToLog(`Commander ${props.playerTwo.getName()} is laughable, that's 4 times they've missed us now!`);\n          } else if(enemyConsecutiveMisses === 7) { // 8 times\n            addTextToLog(`Oh my... could it be a record? Commander ${props.playerTwo.getName()} has missed us 8 times in a row!`);\n          } else if(enemyConsecutiveMisses === 9) { // 10 times\n            addTextToLog(`OK, nope, that's the record. Ten enemy shots in a row, and not one of them hit us! Awkward!`);\n          }        \n          setEnemyConsecutiveMisses(enemyConsecutiveMisses + 1);\n        }\n\n        setIsEnabled(true);\n        if(props.playerOne.getGameboard().allShipsSunk()) {\n          addTextToLog(`We've lost the battle! Cmdr ${props.playerTwo.getName()} has blown all our ships to pieces. Fancy another go, Cmdr ${props.playerOne.getName()}?`, 'game-log-loss');\n          addTextToLog(`YOU LOST!`, 'game-log-loss-header', true);\n          \n          setIsEnabled(false);\n          setGameFinished(true);\n        } else {\n          setPlayerAttacking(1);\n        }        \n      }, 500);      \n    }\n  }, [playerAttacking])\n\n  // Allows player to make attack against the AI, and adds relevant message to the log\n  function enemyReceivesAttack(x, y) {\n    if(props.playerTwo.getGameboard().getTile(x, y).isOccupied()) {\n      let ship = props.playerTwo.getGameboard().getTile(x, y).getOccupyingShip();\n      if(ship.isSunk()) {\n        addTextToLog(`Excellent work! We sunk their ${ship.getName()}!`, 'highlight');\n      } else {\n        let choice = getRandomNumber(0, 50);\n        (choice > 0 && choice < 24) ? addTextToLog(`Great shot! We hit their ${ship.getName()}!`) : addTextToLog(`Solid work! We landed a shot on their ${ship.getName()}!`);\n      }        \n      setConsecutiveMisses(0);\n    } else {\n      if(consecutiveMisses === 2) { // 3 times\n        addTextToLog(`We've missed the enemy three times in a row, get it together!`);\n      } else if(consecutiveMisses === 4) { // 5 times\n        addTextToLog(`You're not having much luck, are you Commander ${props.playerOne.getName()}? C'mon!`);\n      } else if(consecutiveMisses === 6) { // 7 times\n        addTextToLog(`7 misses in a row, Commander ${props.playerOne.getName()}? Quite frankly I expected better of you!`);\n      } else if(consecutiveMisses === 9) { // 10 times\n        addTextToLog(`Out of the 100 tiles on this board, you've somehow just missed a tenth of them in a row with no hits landed in between. I honestly have no words.`);\n      } else if(consecutiveMisses === 14) { // 15 times\n        addTextToLog(`15 consecutive shots. 15 consecutive misses. Dare I ask... Are you even trying to win, Commander ${props.playerOne.getName()}?!`);\n      }       \n      setConsecutiveMisses(consecutiveMisses + 1); \n    }\n\n    if(props.playerTwo.getGameboard().allShipsSunk()) {\n      addTextToLog(`The battle is won, we've sunk all of Cmdr ${props.playerTwo.getName()}'s ships! Jolly good job, Cmdr ${props.playerOne.getName()}!`, 'game-log-win');\n      addTextToLog(`YOU WON!`, 'game-log-win-header', true);\n      setGameFinished(true);\n      setIsEnabled(false);\n    } else {\n      setPlayerAttacking(2);\n    }\n  }\n\n  return(\n    <>\n      <div className=\"forty\">\n        <BoardPlayer gameboard={props.playerOne.getGameboard()}\n                     isEnabled={isEnabled}/>\n        <p className=\"white\">Commander {props.playerOne.getName()}</p>\n      </div>\n      <div className=\"twenty\">\n        <div className=\"game-log\">\n          <h3>Communications</h3>\n          {text !== undefined ? text.map(text => text) : null}\n        </div>\n        \n        {gameFinished ? <button onClick={() => props.globalSetScreen(0)} className=\"play-again\">Play again</button> : null}\n      </div>\n      <div className=\"forty\">\n        <BoardEnemy gameboard={props.playerTwo.getGameboard()}\n                    isEnabled={isEnabled}\n                    receiveAttack={enemyReceivesAttack}/>\n        <p className=\"white\">Commander {props.playerTwo.getName()}</p>\n      </div>\n    </>\n  )\n}\n\nexport default GameLoopVsAI;","/Users/billyplant/Documents/the_odin_project/battleship/src/game/getRandomNumber.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlacingShips.js",["102","103"],"import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlacingShips(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  // Draw board on component mount\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [placed, props.placingShipAxis, props.shipName])\n\n  function placeShip(x, y) {\n    if(props.gameboard.positionIsLegal(x, y, props.placingShipAxis, props.placingShipLength)) {\n      props.gameboard.placeShip(x, y, props.placingShipAxis, props.placingShipLength, props.shipName);\n      setPlaced(placed + 1);\n      props.placeShipFunc(x, y);\n    }\n  }\n\n  let [coords, setCoords] = useState({x: 0, y: 0});\n\n  function redrawBoard(x = coords.x, y = coords.y) {\n    setCoords({x, y});\n    \n    let filledBoard = [];\n\n    // Firstly, draw the board and any occupied tiles\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        filledBoard[y][x] = <BoardTile  onClick={() => placeShip(x, y)} \n                                        onMouseOver={() => redrawBoard(x, y)} \n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHoveringValid={null}\n                                        state={\"placing\"} />\n      }\n    }\n\n    // Then, draw the current location of where the boat will be placed\n    // Set flags depending on whether the position is legal or not\n    let startPos = (props.placingShipAxis === 'x' ? x : y);\n    for(let i = startPos; i < (startPos + props.placingShipLength); i++) {\n      if(startPos <= props.gameboard.getBoardSize()) {\n        let isTilePositionValid = ( props.gameboard.positionIsLegal(x, y, props.placingShipAxis, props.placingShipLength)\n                                    ? true\n                                    : false);\n        let xx = 0, yy = 0;\n        if(props.placingShipAxis === 'x') {\n          xx = i;\n          yy = y;\n        } else if(props.placingShipAxis === 'y') {\n          xx = x;\n          yy = i;\n        }\n\n        if(xx < props.gameboard.getBoardSize() && yy < props.gameboard.getBoardSize()) {\n          filledBoard[yy][xx] = <BoardTile  onClick={() => placeShip(xx, yy)} \n                                            onMouseOver={() => redrawBoard(xx, yy)} \n                                            x={xx} \n                                            y={yy} \n                                            isOccupied={props.gameboard.getTile(xx, yy).isOccupied()} \n                                            isHoveringValid={isTilePositionValid}\n                                            state={\"placing\"} />\n        }\n      }\n    }\n    \n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        <div className=\"gameboard-placing-controls\">\n          <p className=\"coords\">Axis: {props.placingShipAxis} Coords: {coords.x} {coords.y} </p>\n          <button onClick={props.changeAxisFunc} onWheel={props.changeAxisFunc}>Change Axis</button>\n          <p className=\"smaller-p\">Or press Space to Change Axis</p>\n        </div>\n        \n         {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlacingShips;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardPlayer.js",["104","105","106","107"],"import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlayer(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  // Draw board on component mount\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [props.isEnabled])\n\n  function redrawBoard(dx = 0, dy = 0) {\n    let filledBoard = [];\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        let tileIsHit = false;\n        if(props.gameboard.getTile(x, y).isHit()) {\n          tileIsHit = true;\n        }\n        \n        filledBoard[y][x] = <BoardTile  onHover={() => redrawBoard(x, y)}\n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHit={tileIsHit} />\n      }\n    }\n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlayer;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardEnemy.js",["108","109"],"import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlayer(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [placed, props.isEnabled])\n\n  function processAttack(x, y) {\n    if(!props.isEnabled) {\n      return;\n    }\n\n    if(props.gameboard.canReceiveAttack(x, y)) {\n      setPlaced(placed + 1);\n      props.gameboard.receiveAttack(x, y);\n      props.receiveAttack(x, y);\n    }    \n  }\n\n  let [coords, setCoords] = useState({x: 0, y: 0});\n\n  function redrawBoard(dx = coords.x, dy = coords.y) {\n    setCoords({x: dx, y: dy});\n\n    let filledBoard = [];\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        let tileIsHit = false;\n        if(props.gameboard.getTile(x, y).isHit()) {\n          tileIsHit = true;\n        }\n        let tileIsHovering = null;\n        if(dx === x && dy === y) {\n          if(props.gameboard.canReceiveAttack(x, y)) {\n            tileIsHovering = true;\n          } else {\n            tileIsHovering = false;\n          }\n        }\n        filledBoard[y][x] = <BoardTile  onMouseOver={() => redrawBoard(x, y)}\n                                        onClick={() => props.isEnabled ? processAttack(x, y) : null}\n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHoveringValid={tileIsHovering}\n                                        isHit={tileIsHit}\n                                        state=\"attacking\"\n                                        isEnemy={true} />\n      }\n    }\n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlayer;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/boards/BoardTile.js",["110","111","112"],"import React, {useState} from 'react';\nimport explosion from '../../assets/nuclear-explosion.svg';\nimport miss from '../../assets/water-drop.svg';\n\nfunction BoardTile(props) {\n  let classes = '';\n  if(props.isEnemy && !props.isHit) {\n    classes = \"gameboard-tile\";\n  } else {\n    classes = (props.isOccupied ? \"gameboard-tile-occupied\" : \"gameboard-tile\");\n  }\n  if(props.state === 'placing') {\n    if(props.isHoveringValid !== null) {\n      classes = (props.isHoveringValid ? classes += \" gameboard-tile-hover-valid\" : classes += \" gameboard-tile-hover-invalid\");\n    }\n  }\n  if(props.state === 'attacking') {\n    if(props.isHoveringValid !== null) {\n      classes = (props.isHoveringValid ? classes += \" gameboard-tile-hover-attack-valid\" : classes += \" gameboard-tile-hover-attack-invalid\");\n    }\n  }\n  let onClick = (props.onClick ? props.onClick : null);\n  let onMouseOver = (props.onMouseOver ? props.onMouseOver : null);\n\n  return(\n    <> \n      <div className={classes} \n           onMouseOver={onMouseOver}\n           onClick={onClick}> \n        {props.isHit && props.isOccupied ? <img src={explosion} className=\"hit\" /> : null}        \n        {props.isHit && !props.isOccupied ? <img src={miss} className=\"miss\" /> : null}        \n      </div>\n    </>\n  )\n}\n\nexport default BoardTile;","/Users/billyplant/Documents/the_odin_project/battleship/src/game/tile.js",[],"/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameDisplayVsHuman.js",["113","114"],"import React, {useState, useEffect} from 'react';\nimport BoatPlacer from './BoatPlacer';\nimport GameLoopVsHuman from './GameLoopVsHuman';\n\nfunction GameDisplayVsHuman(props) {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  let toDisplay = '';\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <BoatPlacer text={\"You're up first, Commander \" + props.playerOne.getName() + \"! Where shall we position our ships?\"}\n                               gameboard={props.playerOne.getGameboard()}\n                               setScreen={() => setCurrentScreen(1)}\n                               boats={props.boats}/>\n      break;\n    case 1:\n      toDisplay = <BoatPlacer text={\"It's your turn now, Commander \" + props.playerTwo.getName() + \"! Where's best to position our ships?\"}\n                                gameboard={props.playerTwo.getGameboard()}\n                                setScreen={() => setCurrentScreen(2)}\n                                boats={props.boats}/>\n      break;\n    case 2: \n      toDisplay = <GameLoopVsHuman playerOne={props.playerOne}\n                                playerTwo={props.playerTwo}\n                                globalSetScreen={props.globalSetScreen} />\n    default:\n      break;\n  }\n\n  return(\n    <>\n      <div>\n        {toDisplay}\n      </div>\n    </>\n  )\n}\n\nexport default GameDisplayVsHuman;","/Users/billyplant/Documents/the_odin_project/battleship/src/components/GameLoopVsHuman.js",["115"],"import React, {useState, useEffect} from 'react';\nimport BoardPlayer from './boards/BoardPlayer';\nimport BoardEnemy from './boards/BoardEnemy';\nimport getRandomNumber from '../game/getRandomNumber';\n\nfunction GameLoopVsHuman(props) {\n  let [playerAttacking, setPlayerAttacking] = useState(1);\n  let [passDeviceButton, showPassDeviceButton] = useState(false);\n  let [passingDeviceScreen, showPassingDeviceScreen] = useState(false);\n  let [isEnabled, setIsEnabled] = useState(true);\n  let [gameFinished, setGameFinished] = useState(false);\n  let [text, setText] = useState([<p>{`Right then, it's Commander ${props.playerOne.getName()} vs. Commander ${props.playerTwo.getName()}. May the best fighter win - good luck!`}</p>])\n  let [p1ConsecutiveMisses, setP1ConsecutiveMisses]= useState(0);\n  let [p2ConsecutiveMisses, setP2ConsecutiveMisses]= useState(0);\n\n  function addTextToLog(textToAdd, classes='', bigText = false) {\n    let newTextLog = text;\n    if(bigText) {\n      newTextLog.unshift(<h3 className={classes}>{textToAdd}</h3>);\n    } else {\n      newTextLog.unshift(<p className={classes}>{textToAdd}</p>);\n    }    \n    if(newTextLog.length > 10) {\n      newTextLog.pop();\n    }\n    setText(newTextLog);\n  }\n\n  useEffect(() => {\n    if(passingDeviceScreen === true) {\n      setPlayerAttacking((playerAttacking === 1 ? 2 : 1));\n    } else if(passingDeviceScreen === false) {\n      setIsEnabled(true);\n      showPassDeviceButton(false);\n    }\n  }, [passingDeviceScreen])\n\n  function enemyReceivesAttack(x, y) {\n    let attackingPlayer = (playerAttacking === 1 ? props.playerOne : props.playerTwo);\n    let receivingPlayer = (playerAttacking === 1 ? props.playerTwo : props.playerOne);\n    if(receivingPlayer.getGameboard().getTile(x, y).isOccupied()) {\n      let ship = receivingPlayer.getGameboard().getTile(x, y).getOccupyingShip();\n      if(ship.isSunk()) {\n        addTextToLog(`BOOM! Commander ${attackingPlayer.getName()} just sunk Commander ${receivingPlayer.getName()}'s ${ship.getName()}!`, 'highlight');\n      } else {\n        let choice = getRandomNumber(0, 50);\n        (choice > 0 && choice < 24) ? addTextToLog(`Great shot Cmdr ${attackingPlayer.getName()}! You hit their ${ship.getName()}!`) : addTextToLog(`Solid work Cmdr ${attackingPlayer.getName()}! You landed a shot on their ${ship.getName()}!`);\n      }        \n      (playerAttacking === 1 ? setP1ConsecutiveMisses(0) : setP2ConsecutiveMisses(0));\n    } else {\n      let consecutiveMisses = (playerAttacking === 1 ? p1ConsecutiveMisses : p2ConsecutiveMisses);\n      if(consecutiveMisses === 2) { // 3 times\n        addTextToLog(`Cmdr ${attackingPlayer.getName()} has missed their enemy three times in a row, get it together!`);\n      } else if(consecutiveMisses === 4) { // 5 times\n        addTextToLog(`You're not having much luck, are you Cmdr ${attackingPlayer.getName()}? C'mon!`);\n      } else if(consecutiveMisses === 6) { // 7 times\n        addTextToLog(`7 misses in a row, Cmdr ${attackingPlayer.getName()}? Quite frankly I expected better of you!`);\n      } else if(consecutiveMisses === 9) { // 10 times\n        addTextToLog(`Out of the 100 tiles on this board, Cmdr ${attackingPlayer.getName()} somehow just missed a tenth of them in a row with no hits landed in between. I honestly have no words.`);\n      } else if(consecutiveMisses === 14) { // 15 times\n        addTextToLog(`15 consecutive shots. 15 consecutive misses. Dare I ask... Are you even trying to win, Cmdr ${attackingPlayer.getName()}?!`);\n      }       \n      (playerAttacking === 1 ? setP1ConsecutiveMisses(p1ConsecutiveMisses + 1) : setP2ConsecutiveMisses(p2ConsecutiveMisses + 1));\n    }\n\n    if(receivingPlayer.getGameboard().allShipsSunk()) {\n      addTextToLog(`The battle is won, Commander ${attackingPlayer.getName()} sunk all of Commander ${receivingPlayer.getName()}'s ships! Jolly good job, Commander ${attackingPlayer.getName()}!`, 'game-log-win');\n      addTextToLog(`Cmdr ${attackingPlayer.getName()} WINS!`, 'game-log-win-header', true);\n      setGameFinished(true);\n      setIsEnabled(false);\n    } else {\n      setIsEnabled(false);\n      showPassDeviceButton(true);\n    }\n  }\n\n  // Show a screen in between turns that the player must dismiss\n  // Ensures that players do not see each other's boards\n  if(passingDeviceScreen) {\n    return(\n      <div className=\"passing-device\">\n        <h3>Pass device to Commander {playerAttacking === 1 ? props.playerOne.getName() : props.playerTwo.getName()}...</h3>\n        <button onClick={() => showPassingDeviceScreen(false)}>Continue</button>\n      </div>\n    )\n  }\n\n  return(\n    <>\n      <div className=\"forty\">\n        <BoardPlayer gameboard={playerAttacking === 1 ? props.playerOne.getGameboard() : props.playerTwo.getGameboard()}\n                     isEnabled={isEnabled}/>\n        <p className=\"white\">Commander {playerAttacking === 1 ? props.playerOne.getName() : props.playerTwo.getName()}</p>\n      </div>\n      <div className=\"twenty\">\n        <div className=\"game-log\">\n          <h3>Communications</h3>\n          {text !== undefined ? text.map(text => text) : null}\n        </div>\n        \n        {gameFinished ? <button onClick={() => props.globalSetScreen(0)} className=\"play-again\">Play again</button> : null}\n        {passDeviceButton ? <button onClick={() => showPassingDeviceScreen(true)} className=\"pass-device\">Pass Device</button> : null}\n      </div>\n      <div className=\"forty\">\n        <BoardEnemy gameboard={playerAttacking === 1 ? props.playerTwo.getGameboard() : props.playerOne.getGameboard()}\n                    isEnabled={isEnabled}\n                    receiveAttack={enemyReceivesAttack}/>\n        <p className=\"white\">Commander {playerAttacking === 1 ? props.playerTwo.getName() : props.playerOne.getName()}</p>\n      </div>\n    </>\n  )\n}\n\nexport default GameLoopVsHuman;",{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":30,"column":3,"nodeType":"122","messageId":"123","endLine":109,"endColumn":4},{"ruleId":"124","severity":1,"message":"125","line":1,"column":16,"nodeType":"126","messageId":"127","endLine":1,"endColumn":24},{"ruleId":"128","severity":1,"message":"129","line":10,"column":6,"nodeType":"130","endLine":10,"endColumn":8,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"129","line":18,"column":6,"nodeType":"130","endLine":18,"endColumn":24,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"133","line":11,"column":6,"nodeType":"130","endLine":11,"endColumn":8,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":24,"column":5,"nodeType":"137","messageId":"138","endLine":25,"endColumn":13},{"ruleId":"128","severity":1,"message":"139","line":18,"column":6,"nodeType":"130","endLine":18,"endColumn":8,"suggestions":"140"},{"ruleId":"128","severity":1,"message":"141","line":37,"column":6,"nodeType":"130","endLine":37,"endColumn":21,"suggestions":"142"},{"ruleId":"128","severity":1,"message":"143","line":67,"column":6,"nodeType":"130","endLine":67,"endColumn":23,"suggestions":"144"},{"ruleId":"128","severity":1,"message":"145","line":12,"column":6,"nodeType":"130","endLine":12,"endColumn":8,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"145","line":16,"column":6,"nodeType":"130","endLine":16,"endColumn":53,"suggestions":"147"},{"ruleId":"124","severity":1,"message":"148","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":14},{"ruleId":"124","severity":1,"message":"149","line":7,"column":16,"nodeType":"126","messageId":"127","endLine":7,"endColumn":25},{"ruleId":"128","severity":1,"message":"145","line":12,"column":6,"nodeType":"130","endLine":12,"endColumn":8,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"145","line":16,"column":6,"nodeType":"130","endLine":16,"endColumn":23,"suggestions":"151"},{"ruleId":"128","severity":1,"message":"145","line":11,"column":6,"nodeType":"130","endLine":11,"endColumn":8,"suggestions":"152"},{"ruleId":"128","severity":1,"message":"145","line":15,"column":6,"nodeType":"130","endLine":15,"endColumn":31,"suggestions":"153"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":16,"nodeType":"126","messageId":"127","endLine":1,"endColumn":24},{"ruleId":"154","severity":1,"message":"155","line":30,"column":44,"nodeType":"156","endLine":30,"endColumn":83},{"ruleId":"154","severity":1,"message":"155","line":31,"column":45,"nodeType":"156","endLine":31,"endColumn":80},{"ruleId":"124","severity":1,"message":"157","line":1,"column":26,"nodeType":"126","messageId":"127","endLine":1,"endColumn":35},{"ruleId":"135","severity":1,"message":"136","line":26,"column":5,"nodeType":"137","messageId":"138","endLine":27,"endColumn":13},{"ruleId":"128","severity":1,"message":"158","line":36,"column":6,"nodeType":"130","endLine":36,"endColumn":27,"suggestions":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.inputInitialValue'. Either include it or remove the dependency array. If 'setInputValue' needs the current value of 'props.inputInitialValue', you can also switch to useReducer instead of useState and read 'props.inputInitialValue' in the reducer.","ArrayExpression",["162"],["163"],"React Hook useEffect has missing dependencies: 'props.boats' and 'props.playerTwo'. Either include them or remove the dependency array.",["164"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","React Hook useEffect has missing dependencies: 'handleSpaceKey' and 'props.boats'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'handleSpaceKey'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has missing dependencies: 'addTextToLog', 'enemyConsecutiveMisses', 'gameFinished', 'props.playerOne', and 'props.playerTwo'. Either include them or remove the dependency array. You can also do a functional update 'setEnemyConsecutiveMisses(e => ...)' if you only need 'enemyConsecutiveMisses' in the 'setEnemyConsecutiveMisses' call.",["167"],"React Hook useEffect has a missing dependency: 'redrawBoard'. Either include it or remove the dependency array.",["168"],["169"],"'placed' is assigned a value but never used.","'setPlaced' is assigned a value but never used.",["170"],["171"],["172"],["173"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'playerAttacking'. Either include it or remove the dependency array. You can also do a functional update 'setPlayerAttacking(p => ...)' if you only need 'playerAttacking' in the 'setPlayerAttacking' call.",["174"],"no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"187","fix":"191"},{"desc":"192","fix":"193"},{"desc":"187","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [props.inputInitialValue]",{"range":"199","text":"200"},"Update the dependencies array to be: [props.inputInitialValue, props.textToShow]",{"range":"201","text":"202"},"Update the dependencies array to be: [props.boats, props.playerTwo]",{"range":"203","text":"204"},"Update the dependencies array to be: [handleSpaceKey, props.boats]",{"range":"205","text":"206"},"Update the dependencies array to be: [eventListener, handleSpaceKey]",{"range":"207","text":"208"},"Update the dependencies array to be: [addTextToLog, enemyConsecutiveMisses, gameFinished, playerAttacking, props.playerOne, props.playerTwo]",{"range":"209","text":"210"},"Update the dependencies array to be: [redrawBoard]",{"range":"211","text":"212"},"Update the dependencies array to be: [placed, props.placingShipAxis, props.shipName, redrawBoard]",{"range":"213","text":"214"},{"range":"215","text":"212"},"Update the dependencies array to be: [props.isEnabled, redrawBoard]",{"range":"216","text":"217"},{"range":"218","text":"212"},"Update the dependencies array to be: [placed, props.isEnabled, redrawBoard]",{"range":"219","text":"220"},"Update the dependencies array to be: [passingDeviceScreen, playerAttacking]",{"range":"221","text":"222"},[281,283],"[props.inputInitialValue]",[473,491],"[props.inputInitialValue, props.textToShow]",[320,322],"[props.boats, props.playerTwo]",[546,548],"[handleSpaceKey, props.boats]",[973,988],"[eventListener, handleSpaceKey]",[3361,3378],"[addTextToLog, enemyConsecutiveMisses, gameFinished, playerAttacking, props.playerOne, props.playerTwo]",[308,310],"[redrawBoard]",[357,404],"[placed, props.placingShipAxis, props.shipName, redrawBoard]",[302,304],[351,368],"[props.isEnabled, redrawBoard]",[267,269],[316,341],"[placed, props.isEnabled, redrawBoard]",[1454,1475],"[passingDeviceScreen, playerAttacking]"]
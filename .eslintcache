[{"/home/billy/Documents/the_odin_project/battleship/src/index.js":"1","/home/billy/Documents/the_odin_project/battleship/src/App.js":"2","/home/billy/Documents/the_odin_project/battleship/src/game/player.js":"3","/home/billy/Documents/the_odin_project/battleship/src/game/gameboard.js":"4","/home/billy/Documents/the_odin_project/battleship/src/game/ship.js":"5","/home/billy/Documents/the_odin_project/battleship/src/components/GameDisplayRouter.js":"6","/home/billy/Documents/the_odin_project/battleship/src/components/splash/SplashText.js":"7","/home/billy/Documents/the_odin_project/battleship/src/components/splash/SplashInput.js":"8","/home/billy/Documents/the_odin_project/battleship/src/components/GameDisplayVsAI.js":"9","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardPlacingShips.js":"10","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardPlayer.js":"11","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardEnemy.js":"12","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardTile.js":"13","/home/billy/Documents/the_odin_project/battleship/src/components/GameLoopVsAI.js":"14","/home/billy/Documents/the_odin_project/battleship/src/components/BoatPlacer.js":"15","/home/billy/Documents/the_odin_project/battleship/src/game/getRandomNumber.js":"16"},{"size":241,"mtime":1610734162011,"results":"17","hashOfConfig":"18"},{"size":2488,"mtime":1610796585931,"results":"19","hashOfConfig":"18"},{"size":5089,"mtime":1610832749693,"results":"20","hashOfConfig":"18"},{"size":3382,"mtime":1610743506966,"results":"21","hashOfConfig":"18"},{"size":1040,"mtime":1610734162011,"results":"22","hashOfConfig":"18"},{"size":925,"mtime":1610796511874,"results":"23","hashOfConfig":"18"},{"size":473,"mtime":1610795621691,"results":"24","hashOfConfig":"18"},{"size":564,"mtime":1610795627450,"results":"25","hashOfConfig":"18"},{"size":984,"mtime":1610796601085,"results":"26","hashOfConfig":"18"},{"size":3542,"mtime":1610800995591,"results":"27","hashOfConfig":"18"},{"size":1328,"mtime":1610795808978,"results":"28","hashOfConfig":"18"},{"size":2169,"mtime":1610822426174,"results":"29","hashOfConfig":"18"},{"size":1297,"mtime":1610795926286,"results":"30","hashOfConfig":"18"},{"size":6044,"mtime":1610801506769,"results":"31","hashOfConfig":"18"},{"size":2029,"mtime":1610796460516,"results":"32","hashOfConfig":"18"},{"size":102,"mtime":1610798312325,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"15dj2ll",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/billy/Documents/the_odin_project/battleship/src/index.js",[],["75","76"],"/home/billy/Documents/the_odin_project/battleship/src/App.js",["77","78"],"import './App.css';\nimport './assets/sea.jpg'\nimport React, {useState} from 'react';\nimport SplashText from './components/splash/SplashText';\nimport SplashInput from './components/splash/SplashInput';\nimport GameDisplayRouter from './components/GameDisplayRouter';\n\nfunction App() {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  const [playerOneName, setPlayerOneName] = useState('Badman');\n  const [playerTwoName, setPlayerTwoName] = useState('Bigboy');\n  let toDisplay = '';\n\n  function setName(player, name) {\n    if(player === 1 && name.length > 0) {\n      setPlayerOneName(name);\n    } else if(player === 2 && name.length > 0) {\n      setPlayerTwoName(name);\n    }\n  }\n\n  function setScreen(setTo) {\n    setCurrentScreen(setTo);\n  }\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <SplashText textToShow=\"Welcome to Battleship. Ready to start?\"\n                              btn1Text=\"Begin Mission\"\n                              btn1Func={() => setScreen(1)} />\n      break;\n    \n    case 1:\n      toDisplay = <SplashText textToShow=\"Who will you be fighting today?\"\n                              btn1Text=\"Commander Puter (AI)\"\n                              btn1Func={() => setScreen(2)}\n                              btn2Text=\"Human\"\n                              btn2Disabled />\n      break;\n\n    case 2:\n      toDisplay = <SplashText textToShow=\"Roger that, let's blow Commander Puter's fleet to smithereens!\"\n                              btn1Text=\"We'll teach him a bloody good lesson!\"\n                              btn1Func={() => setScreen(3)} />\n      break;\n\n    case 3:\n      toDisplay = <SplashInput textToShow=\"That we will, sir. But before we sail off, remind me of your name...\"\n                               inputPlaceholder=\"Your name, sir\"\n                               submitText=\"Battle\"\n                               submitFunc={(inputValue) => {\n                                 setScreen(4);\n                                 setName(1, inputValue);\n                               }} />\n      break;\n\n    case 4:\n      toDisplay = <GameDisplayRouter opponent=\"ai\"\n                                     p1Name={playerOneName} \n                                     p2Name=\"Puter\" />\n      break;\n  }\n\n  return(\n    <div className=\"App\">\n      <div className=\"wrap\">\n        { currentScreen < 4 \n          ? <h1>Battleship</h1>\n          : <h2>Battleship</h2> }\n        {toDisplay}\n      </div>\n    </div>    \n  );\n}\n\nexport default App;\n","/home/billy/Documents/the_odin_project/battleship/src/game/player.js",[],"/home/billy/Documents/the_odin_project/battleship/src/game/gameboard.js",[],"/home/billy/Documents/the_odin_project/battleship/src/game/ship.js",[],"/home/billy/Documents/the_odin_project/battleship/src/components/GameDisplayRouter.js",["79"],"import React, {useState} from 'react';\nimport {HumanPlayer, ComputerPlayer} from '../game/player';\nimport GameDisplayVsAI from './GameDisplayVsAI';\n\nfunction GameDisplayRouter(props) {\n  const boats = [{name: 'Carrier', length: 5},\n  {name: 'Battleship', length: 4},\n  {name: 'Submarine', length: 3},\n  {name: 'Cruiser', length: 3},\n  {name: 'Destroyer', length: 2}];\n\n  let gameModeToDisplay;\n  let playerOne = HumanPlayer(props.p1Name, 10);\n  let playerTwo;\n  if(props.opponent === 'ai') {\n    playerTwo = ComputerPlayer(props.p2Name, 10);\n    gameModeToDisplay = <GameDisplayVsAI \n                         playerOne={playerOne} \n                         playerTwo={playerTwo}\n                         boats={boats} />\n  } else {\n    playerTwo = HumanPlayer(props.p2Name, 10);\n    //gameModeToDisplay = <GameVsPlayerDisplay />\n  }\n\n  return(\n    <>\n      {gameModeToDisplay}\n    </>\n  )\n}\n\nexport default GameDisplayRouter;","/home/billy/Documents/the_odin_project/battleship/src/components/splash/SplashText.js",[],"/home/billy/Documents/the_odin_project/battleship/src/components/splash/SplashInput.js",[],"/home/billy/Documents/the_odin_project/battleship/src/components/GameDisplayVsAI.js",["80","81"],"import React, {useState, useEffect} from 'react';\nimport BoatPlacer from './BoatPlacer';\nimport GameLoopVsAI from './GameLoopVsAI';\n\nfunction GameDisplayVsAI(props) {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  let toDisplay = '';\n\n  useEffect(() => {\n    props.playerTwo.fillGameboard(props.boats);\n  }, [])\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <BoatPlacer text={\"You're in charge, Commander \" + props.playerOne.getName() + \"! Where shall we position our ships?\"}\n                               gameboard={props.playerOne.getGameboard()}\n                               setScreen={() => setCurrentScreen(1)}\n                               boats={props.boats}/>\n      break;\n    case 1: \n      toDisplay = <GameLoopVsAI playerOne={props.playerOne}\n                                playerTwo={props.playerTwo} />\n    default:\n      break;\n  }\n\n  return(\n    <>\n      <div>\n        {toDisplay}\n      </div>\n    </>\n  )\n}\n\nexport default GameDisplayVsAI;","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardPlacingShips.js",["82","83"],"import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlacingShips(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  // Draw board on component mount\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [placed, props.placingShipAxis])\n\n  function placeShip(x, y) {\n    if(props.gameboard.positionIsLegal(x, y, props.placingShipAxis, props.placingShipLength)) {\n      props.gameboard.placeShip(x, y, props.placingShipAxis, props.placingShipLength, props.shipName);\n      setPlaced(placed + 1);\n      props.placeShipFunc(x, y);\n    }\n  }\n\n  let [coords, setCoords] = useState({x: 0, y: 0});\n\n  function redrawBoard(x = coords.x, y = coords.y) {\n    setCoords({x, y});\n    \n    let filledBoard = [];\n\n    // Firstly, draw the board and any occupied tiles\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        filledBoard[y][x] = <BoardTile  onClick={() => placeShip(x, y)} \n                                        onMouseOver={() => redrawBoard(x, y)} \n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHoveringValid={null}\n                                        state={\"placing\"} />\n      }\n    }\n\n    // Then, draw the current location of where the boat will be placed\n    // Set flags depending on whether the position is legal or not\n    let startPos = (props.placingShipAxis === 'x' ? x : y);\n    for(let i = startPos; i < (startPos + props.placingShipLength); i++) {\n      if(startPos <= props.gameboard.getBoardSize()) {\n        let isTilePositionValid = ( props.gameboard.positionIsLegal(x, y, props.placingShipAxis, props.placingShipLength)\n                                    ? true\n                                    : false);\n        let xx = 0, yy = 0;\n        if(props.placingShipAxis === 'x') {\n          xx = i;\n          yy = y;\n        } else if(props.placingShipAxis === 'y') {\n          xx = x;\n          yy = i;\n        }\n\n        if(xx < props.gameboard.getBoardSize() && yy < props.gameboard.getBoardSize()) {\n          filledBoard[yy][xx] = <BoardTile  onClick={() => placeShip(xx, yy)} \n                                            onMouseOver={() => redrawBoard(xx, yy)} \n                                            x={xx} \n                                            y={yy} \n                                            isOccupied={props.gameboard.getTile(xx, yy).isOccupied()} \n                                            isHoveringValid={isTilePositionValid}\n                                            state={\"placing\"} />\n        }\n      }\n    }\n    \n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        <div className=\"gameboard-placing-controls\">\n          <p className=\"coords\">Axis: {props.placingShipAxis} Coords: {coords.x} {coords.y} </p>\n          <button onClick={props.changeAxisFunc} onWheel={props.changeAxisFunc}>Change Axis</button>\n          <p className=\"smaller-p\">Or press Space to Change Axis</p>\n        </div>\n        \n         {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlacingShips;","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardPlayer.js",["84","85","86","87"],"import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlayer(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  // Draw board on component mount\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [props.isEnabled])\n\n  function redrawBoard(dx = 0, dy = 0) {\n    let filledBoard = [];\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        let tileIsHit = false;\n        if(props.gameboard.getTile(x, y).isHit()) {\n          tileIsHit = true;\n        }\n        \n        filledBoard[y][x] = <BoardTile  onHover={() => redrawBoard(x, y)}\n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHit={tileIsHit} />\n      }\n    }\n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlayer;","/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardEnemy.js",["88","89"],"/home/billy/Documents/the_odin_project/battleship/src/components/boards/BoardTile.js",["90","91","92"],"import React, {useState} from 'react';\nimport explosion from '../../assets/nuclear-explosion.svg';\nimport miss from '../../assets/water-drop.svg';\n\nfunction BoardTile(props) {\n  let classes = '';\n  if(props.isEnemy && !props.isHit) {\n    classes = \"gameboard-tile\";\n  } else {\n    classes = (props.isOccupied ? \"gameboard-tile-occupied\" : \"gameboard-tile\");\n  }\n  if(props.state === 'placing') {\n    if(props.isHoveringValid !== null) {\n      classes = (props.isHoveringValid ? classes += \" gameboard-tile-hover-valid\" : classes += \" gameboard-tile-hover-invalid\");\n    }\n  }\n  if(props.state === 'attacking') {\n    if(props.isHoveringValid !== null) {\n      classes = (props.isHoveringValid ? classes += \" gameboard-tile-hover-attack-valid\" : classes += \" gameboard-tile-hover-attack-invalid\");\n    }\n  }\n  let onClick = (props.onClick ? props.onClick : null);\n  let onMouseOver = (props.onMouseOver ? props.onMouseOver : null);\n\n  return(\n    <> \n      <div className={classes} \n           onMouseOver={onMouseOver}\n           onClick={onClick}> \n        {props.isHit && props.isOccupied ? <img src={explosion} className=\"hit\" /> : null}        \n        {props.isHit && !props.isOccupied ? <img src={miss} className=\"miss\" /> : null}        \n      </div>\n    </>\n  )\n}\n\nexport default BoardTile;","/home/billy/Documents/the_odin_project/battleship/src/components/GameLoopVsAI.js",["93"],"import React, {useState, useEffect} from 'react';\nimport BoardPlayer from './boards/BoardPlayer';\nimport BoardEnemy from './boards/BoardEnemy';\nimport getRandomNumber from '../game/getRandomNumber';\n\nfunction GameLoopVsAI(props) {\n  let [playerAttacking, setPlayerAttacking] = useState(1);\n  let [isEnabled, setIsEnabled] = useState(true);\n  let [gameFinished, setGameFinished] = useState(false);\n  let [text, setText] = useState([<p>{`Righty ho Commander ${props.playerOne.getName()}, it's time to show these muppets what we're made of. Good luck, and don't let us down!`}</p>])\n  let [consecutiveMisses, setConsecutiveMisses]= useState(0);\n  let [enemyConsecutiveMisses, setEnemyConsecutiveMisses]= useState(0);\n\n  function addTextToLog(textToAdd, classes='', bigText = false) {\n    let newTextLog = text;\n    if(bigText) {\n      newTextLog.unshift(<h3 className={classes}>{textToAdd}</h3>);\n    } else {\n      newTextLog.unshift(<p className={classes}>{textToAdd}</p>);\n    }    \n    setText(newTextLog);\n  }\n\n  // When playerAttacking changes, tell the AI to make its next shot, and add relevant message to the log\n  useEffect(() => {\n    if(playerAttacking === 2 && !gameFinished) {\n      setIsEnabled(false);\n      setTimeout(() => {\n        let attackedCoords = props.playerTwo.attackGameboard(props.playerOne.getGameboard());\n        if(props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).isOccupied()) {\n          let ship = props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).getOccupyingShip();\n          if(ship.isSunk()) {\n            addTextToLog(`Bugger, the enemy sunk our ${ship.getName()}!`, 'warning');\n          } else {\n            let choice = getRandomNumber(0, 50);\n            (choice > 0 && choice < 24) ? addTextToLog(`Ouch, the enemy hit our ${ship.getName()}!`) : addTextToLog(`Oof, they've landed a shot on our ${ship.getName()}!`);\n          }          \n          setEnemyConsecutiveMisses(0);\n        } else {\n          if(enemyConsecutiveMisses === 1) { // 2 times\n            addTextToLog(`Our pitiful enemy has missed us twice in a row!`);\n          } else if(enemyConsecutiveMisses === 3) { // 4 times\n            addTextToLog(`Commander ${props.playerTwo.getName()} is laughable, that's 4 times they've missed us now!`);\n          } else if(enemyConsecutiveMisses === 7) { // 8 times\n            addTextToLog(`Oh my... could it be a record? Commander ${props.playerTwo.getName()} has missed us 8 times in a row!`);\n          } else if(enemyConsecutiveMisses === 9) { // 10 times\n            addTextToLog(`OK, nope, that's the record. Ten enemy shots in a row, and not one of them hit us! Awkward!`);\n          }        \n          setEnemyConsecutiveMisses(enemyConsecutiveMisses + 1);\n        }\n\n        setIsEnabled(true);\n        if(props.playerOne.getGameboard().allShipsSunk()) {\n          addTextToLog(`We lost the battle! Commander ${props.playerTwo.getName()} has blown our ships to pieces. Let's give it another go?`, 'game-log-loss', true);\n          setIsEnabled(false);\n          setGameFinished(true);\n        } else {\n          setPlayerAttacking(1);\n        }        \n      }, 500);      \n    }\n  }, [playerAttacking])\n\n  // Allows player to make attack against the AI, and adds relevant message to the log\n  function enemyReceivesAttack(x, y) {\n    if(props.playerTwo.getGameboard().getTile(x, y).isOccupied()) {\n      let ship = props.playerTwo.getGameboard().getTile(x, y).getOccupyingShip();\n      if(ship.isSunk()) {\n        addTextToLog(`Excellent work! We sunk their ${ship.getName()}!`, 'highlight');\n      } else {\n        let choice = getRandomNumber(0, 50);\n        (choice > 0 && choice < 24) ? addTextToLog(`Great shot! We hit their ${ship.getName()}!`) : addTextToLog(`Solid work! We landed a shot on their ${ship.getName()}!`);\n      }        \n      setConsecutiveMisses(0);\n    } else {\n      if(consecutiveMisses === 2) { // 3 times\n        addTextToLog(`We've missed the enemy three times in a row, get it together!`);\n      } else if(consecutiveMisses === 4) { // 5 times\n        addTextToLog(`You're not having much luck, are you Commander ${props.playerOne.getName()}? C'mon!`);\n      } else if(consecutiveMisses === 6) { // 7 times\n        addTextToLog(`7 misses in a row, Commander ${props.playerOne.getName()}? Quite frankly I expected better of you!`);\n      } else if(consecutiveMisses === 9) { // 10 times\n        addTextToLog(`Out of the 100 tiles on this board, you've somehow just missed a tenth of them in a row with no hits landed in between. I honestly have no words.`);\n      } else if(consecutiveMisses === 14) { // 15 times\n        addTextToLog(`15 consecutive shots. 15 consecutive misses. Dare I ask... Are you even trying to win, Commander ${props.playerOne.getName()}?!`);\n      }       \n      setConsecutiveMisses(consecutiveMisses + 1); \n    }\n\n    if(props.playerTwo.getGameboard().allShipsSunk()) {\n      addTextToLog(`WE WON THE BATTLE! We've sunk all of poxy ${props.playerTwo.getName()}'s ships! You made it look easy... Jolly good job, Commander ${props.playerOne.getName()}!`, 'game-log-win', true);\n      setGameFinished(true);\n      setIsEnabled(false);\n    } else {\n      setPlayerAttacking(2);\n    }\n  }\n\n  return(\n    <>\n      <div className=\"forty\">\n        <BoardPlayer gameboard={props.playerOne.getGameboard()}\n                     isEnabled={isEnabled}/>\n        <p className=\"white\">Commander {props.playerOne.getName()}</p>\n      </div>\n      <div className=\"twenty game-log\">\n        <h3>Communications</h3>\n        {text !== undefined ? text.map(text => text) : null}\n        {gameFinished ? <button className=\"play-again\">Play again</button> : null}\n      </div>\n      <div className=\"forty\">\n        <BoardEnemy gameboard={props.playerTwo.getGameboard()}\n                    isEnabled={isEnabled}\n                    receiveAttack={enemyReceivesAttack}/>\n        <p className=\"white\">Commander {props.playerTwo.getName()}</p>\n      </div>\n    </>\n  )\n}\n\nexport default GameLoopVsAI;","/home/billy/Documents/the_odin_project/battleship/src/components/BoatPlacer.js",["94","95","96"],"import React, {useState, useEffect} from 'react';\nimport BoardPlacingShips from './boards/BoardPlacingShips';\n\nfunction BoatPlacer(props) {\n  let [boatsToPlace, setBoatsToPlace] = useState();\n  let [currentBoat, setCurrentBoat] = useState(0);\n  let [axis, setAxis] = useState('y');\n  let [eventListener, setEventListener] = useState(false);\n  let spaceEventListener;\n\n  useEffect(() => {\n    let boats = props.boats;\n    setBoatsToPlace([...boats]);\n\n    return(() => {\n      window.removeEventListener(\"keyup\", handleSpaceKey);\n      setEventListener(false);\n    })\n  }, []);\n\n  function handleSpaceKey(e) {\n    if(e.keyCode === 32) {\n      if(axis === 'x') {\n        setAxis('y');\n      } else if(axis === 'y') {\n        setAxis('x');\n      }\n      window.removeEventListener('keyup', handleSpaceKey);\n      setEventListener(false);\n    }  \n  }\n\n  useEffect(() => {\n    if(eventListener === false) {\n      setEventListener(true);\n      window.addEventListener('keyup', handleSpaceKey);\n    }\n  }, [eventListener]);\n\n  function placeShip(x, y) {\n    if(currentBoat < boatsToPlace.length) {\n      if(props.gameboard.positionIsLegal()) {\n        if((currentBoat + 1) < boatsToPlace.length) {\n          setCurrentBoat(currentBoat + 1);  \n        } else {\n          props.setScreen();\n        }               \n      }      \n    }\n  }\n\n  return(\n    <>\n      <div>\n        <p className=\"smaller-p\">{props.text}</p>\n        { boatsToPlace !== undefined\n        ? <>\n            <p className=\"smaller-p\">Currently Placing: {boatsToPlace[currentBoat].name}</p>\n            <BoardPlacingShips gameboard={props.gameboard}\n                placingShipLength={boatsToPlace[currentBoat].length}\n                placingShipAxis={axis} \n                shipName={boatsToPlace[currentBoat].name}\n                placeShipFunc={placeShip}\n                changeAxisFunc={() => axis === 'x' ? setAxis('y') : setAxis('x')}\n                />\n          </>\n        : <p>Setting up board...</p>}\n      </div>\n    </>\n  )\n}\n\nexport default BoatPlacer;","/home/billy/Documents/the_odin_project/battleship/src/game/getRandomNumber.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":11,"column":10,"nodeType":"103","messageId":"104","endLine":11,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":26,"column":3,"nodeType":"107","messageId":"108","endLine":62,"endColumn":4},{"ruleId":"101","severity":1,"message":"109","line":1,"column":16,"nodeType":"103","messageId":"104","endLine":1,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":11,"column":6,"nodeType":"112","endLine":11,"endColumn":8,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":23,"column":5,"nodeType":"116","messageId":"117","endLine":24,"endColumn":13},{"ruleId":"110","severity":1,"message":"118","line":12,"column":6,"nodeType":"112","endLine":12,"endColumn":8,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"118","line":16,"column":6,"nodeType":"112","endLine":16,"endColumn":37,"suggestions":"120"},{"ruleId":"101","severity":1,"message":"121","line":7,"column":8,"nodeType":"103","messageId":"104","endLine":7,"endColumn":14},{"ruleId":"101","severity":1,"message":"122","line":7,"column":16,"nodeType":"103","messageId":"104","endLine":7,"endColumn":25},{"ruleId":"110","severity":1,"message":"118","line":12,"column":6,"nodeType":"112","endLine":12,"endColumn":8,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"118","line":16,"column":6,"nodeType":"112","endLine":16,"endColumn":23,"suggestions":"124"},{"ruleId":"110","severity":1,"message":"118","line":11,"column":6,"nodeType":"112","endLine":11,"endColumn":8,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"118","line":15,"column":6,"nodeType":"112","endLine":15,"endColumn":31,"suggestions":"126"},{"ruleId":"101","severity":1,"message":"109","line":1,"column":16,"nodeType":"103","messageId":"104","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"128","line":30,"column":44,"nodeType":"129","endLine":30,"endColumn":83},{"ruleId":"127","severity":1,"message":"128","line":31,"column":45,"nodeType":"129","endLine":31,"endColumn":80},{"ruleId":"110","severity":1,"message":"130","line":62,"column":6,"nodeType":"112","endLine":62,"endColumn":23,"suggestions":"131"},{"ruleId":"101","severity":1,"message":"132","line":9,"column":7,"nodeType":"103","messageId":"104","endLine":9,"endColumn":25},{"ruleId":"110","severity":1,"message":"133","line":19,"column":6,"nodeType":"112","endLine":19,"endColumn":8,"suggestions":"134"},{"ruleId":"110","severity":1,"message":"135","line":38,"column":6,"nodeType":"112","endLine":38,"endColumn":21,"suggestions":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'playerTwoName' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.boats' and 'props.playerTwo'. Either include them or remove the dependency array.","ArrayExpression",["139"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","React Hook useEffect has a missing dependency: 'redrawBoard'. Either include it or remove the dependency array.",["140"],["141"],"'placed' is assigned a value but never used.","'setPlaced' is assigned a value but never used.",["142"],["143"],["144"],["145"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'addTextToLog', 'enemyConsecutiveMisses', 'gameFinished', 'props.playerOne', and 'props.playerTwo'. Either include them or remove the dependency array. You can also do a functional update 'setEnemyConsecutiveMisses(e => ...)' if you only need 'enemyConsecutiveMisses' in the 'setEnemyConsecutiveMisses' call.",["146"],"'spaceEventListener' is defined but never used.","React Hook useEffect has missing dependencies: 'handleSpaceKey' and 'props.boats'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'handleSpaceKey'. Either include it or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"151","fix":"155"},{"desc":"156","fix":"157"},{"desc":"151","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [props.boats, props.playerTwo]",{"range":"167","text":"168"},"Update the dependencies array to be: [redrawBoard]",{"range":"169","text":"170"},"Update the dependencies array to be: [placed, props.placingShipAxis, redrawBoard]",{"range":"171","text":"172"},{"range":"173","text":"170"},"Update the dependencies array to be: [props.isEnabled, redrawBoard]",{"range":"174","text":"175"},{"range":"176","text":"170"},"Update the dependencies array to be: [placed, props.isEnabled, redrawBoard]",{"range":"177","text":"178"},"Update the dependencies array to be: [addTextToLog, enemyConsecutiveMisses, gameFinished, playerAttacking, props.playerOne, props.playerTwo]",{"range":"179","text":"180"},"Update the dependencies array to be: [handleSpaceKey, props.boats]",{"range":"181","text":"182"},"Update the dependencies array to be: [eventListener, handleSpaceKey]",{"range":"183","text":"184"},[320,322],"[props.boats, props.playerTwo]",[308,310],"[redrawBoard]",[357,388],"[placed, props.placingShipAxis, redrawBoard]",[302,304],[351,368],"[props.isEnabled, redrawBoard]",[267,269],[316,341],"[placed, props.isEnabled, redrawBoard]",[3197,3214],"[addTextToLog, enemyConsecutiveMisses, gameFinished, playerAttacking, props.playerOne, props.playerTwo]",[572,574],"[handleSpaceKey, props.boats]",[999,1014],"[eventListener, handleSpaceKey]"]
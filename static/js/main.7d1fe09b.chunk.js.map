{"version":3,"sources":["assets/sea.jpg","components/splash/SplashText.js","components/splash/SplashInput.js","game/ship.js","game/tile.js","game/gameboard.js","game/player.js","assets/nuclear-explosion.svg","assets/water-drop.svg","components/boards/BoardTile.js","components/boards/BoardPlacingShips.js","components/BoatPlacer.js","components/boards/BoardPlayer.js","components/boards/BoardEnemy.js","game/getRandomNumber.js","components/GameLoopVsAI.js","components/GameDisplayVsAI.js","components/GameLoopVsHuman.js","components/GameDisplayVsHuman.js","components/GameDisplayRouter.js","App.js","index.js"],"names":["SplashText","props","buttons","push","onClick","btn1Func","disabled","btn1Disabled","btn1Text","btn2Text","btn2Func","btn2Disabled","textToShow","map","btn","SplashInput","useState","inputValue","setInputValue","useEffect","inputInitialValue","length","onSubmit","e","submitFunc","type","placeholder","inputPlaceholder","onChange","target","value","handleChange","submitText","Ship","position","axis","name","shipLength","hits","i","hit","isSunk","hitPosition","getName","Tile","occupied","occupyingShip","setHit","isHit","setOccupied","isOccupied","shipIndex","getOccupyingShip","Gameboard","size","board","y","x","allShips","positionIsLegal","startPos","positionIsOutOfBounds","positionIsAlreadyTaken","placeShip","tilesOccupiedByShip","shipToBePlaced","receiveAttack","canReceiveAttack","getAllSunkShipCoords","coords","getBoard","getBoardSize","getTile","allShipsSunk","Player","boardSize","gameboard","getGameboard","HumanPlayer","prototype","Object","assign","ComputerPlayer","successfulCoordinates","lastSuccessfulDirection","getRandomArbitrary","min","max","Math","random","shuffleThenPrioritiseDirection","coordsToShuffle","directionToPrioritise","axisToPrioritise","prioritisedCoords","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","directionsToPrioritise","highRank","lowRank","includes","direction","coordsToPrioritise","filter","unshift","makeRandomAttack","gameboardToAttack","coordsAreInvalid","randomX","randomY","toFixed","shipName","detemineShipAxis","coordToTry","coordsMatchingShipName","xCoords","yCoords","attackGameboard","j","coordsToTry","makeCalculatedAttack","coordsToPrune","prunedSuccessfulCoords","canAdd","k","getPrunedSuccessfulCoords","fillGameboard","shipsToFillWith","console","log","BoardTile","classes","isEnemy","state","isHoveringValid","onMouseOver","className","src","explosion","miss","BoardPlacingShips","setBoard","placed","setPlaced","placingShipAxis","placingShipLength","placeShipFunc","redrawBoard","setCoords","filledBoard","tileIsOccupied","isTilePositionValid","xx","yy","changeAxisFunc","onWheel","BoatPlacer","boatsToPlace","setBoatsToPlace","currentBoat","setCurrentBoat","setAxis","eventListener","setEventListener","handleSpaceKey","keyCode","window","removeEventListener","boats","addEventListener","text","undefined","setScreen","BoardPlayer","tileIsHit","onHover","isEnabled","processAttack","dx","dy","tileIsHovering","GameLoopVsAI","playerAttacking","setPlayerAttacking","setIsEnabled","gameFinished","setGameFinished","playerOne","setText","consecutiveMisses","setConsecutiveMisses","enemyConsecutiveMisses","setEnemyConsecutiveMisses","addTextToLog","textToAdd","bigText","newTextLog","pop","setTimeout","attackedCoords","playerTwo","ship","choice","getRandomNumber","globalSetScreen","BoardEnemy","GameDisplayVsAI","currentScreen","setCurrentScreen","toDisplay","GameLoopVsHuman","passDeviceButton","showPassDeviceButton","passingDeviceScreen","showPassingDeviceScreen","p1ConsecutiveMisses","setP1ConsecutiveMisses","p2ConsecutiveMisses","setP2ConsecutiveMisses","attackingPlayer","receivingPlayer","GameDisplayVsHuman","GameDisplayRouter","gameModeToDisplay","p1Name","opponent","p2Name","App","playerOneName","setPlayerOneName","playerTwoName","setPlayerTwoName","playerOnePreservedName","savePlayerOnePreservedName","playerTwoPreservedName","savePlayerTwoPreservedName","setName","player","setTo","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d1fe09b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sea.e691ca44.jpg\";","function SplashText(props) {\n  let buttons = [];\n  buttons.push(<button onClick={props.btn1Func} disabled={props.btn1Disabled ? true : false}>{props.btn1Text}</button>);\n  if(props.btn2Text) {\n    buttons.push(<button onClick={props.btn2Func} disabled={props.btn2Disabled ? true : false}>{props.btn2Text}</button>);\n  }\n\n  return(\n    <>\n      <div>\n        <p>{props.textToShow}</p>\n        {buttons.map(btn => btn)}\n      </div>\n    </>\n  );\n}\n\nexport default SplashText;","import React, {useState, useEffect} from 'react';\n\nfunction SplashInput(props) {\n  let [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if(props.inputInitialValue && props.inputInitialValue.length > 0) {\n      setInputValue(props.inputInitialValue);\n    }\n  }, [])\n\n  useEffect(() => {\n    if(props.inputInitialValue && props.inputInitialValue.length > 0) {\n      setInputValue(props.inputInitialValue);\n    } else {\n      setInputValue('');\n    }\n  }, [props.textToShow])\n\n  function handleChange(e) {\n    setInputValue(e.target.value);\n  }\n\n  return(\n    <>\n      <div>\n        <p>{props.textToShow}</p>\n        <form onSubmit={e => props.submitFunc(e, inputValue)}>\n          <input type=\"text\" placeholder={props.inputPlaceholder} onChange={e => handleChange(e)} value={inputValue}/>\n          <input type=\"submit\" value={props.submitText} />\n        </form>\n      </div>\n    </>\n  );\n}\n\nexport default SplashInput;","const Ship = (position, axis, name = '') => {\n  const shipLength = position.length;\n\n  // From the length, create an array to keep track of hits\n  let hits = [];\n  for(let i = 0; i < shipLength; i++) {\n    hits.push({\n      position: position[i],\n      hit: false,\n    })\n  }\n\n  const isSunk = () => {\n    // Go through all hits. If any are false, return false, else return true\n    for(let i = 0; i < shipLength; i++) {\n      if(hits[i].hit === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const hit = (hitPosition) => {\n    // Find position in hits[], return true if hit has not already been registered\n    // Else return false \n    for(let i = 0; i < shipLength; i++) {\n      if(hits[i].position === hitPosition[axis]) {\n        if(hits[i].hit === false) {\n          hits[i].hit = true;\n          return true;\n        } else {\n          return false;\n        }        \n      }\n    }\n  }\n\n  const getName = () => {\n    if(name) {\n      return name;\n    }\n  }\n\n  return { hit, isSunk, getName };\n}\n\nexport { Ship };","const Tile = () => {\n  let hit = false;\n  let occupied = false;\n  let occupyingShip = null;\n\n  const setHit = (isHit) => hit = isHit;\n  const isHit = () => {\n    return hit;\n  }\n\n  const setOccupied = (isOccupied, shipIndex) => {\n    occupied = isOccupied;\n    occupyingShip = shipIndex;\n  };\n  const isOccupied = () => {\n    return occupied;\n  };\n  const getOccupyingShip = () => {\n    return occupyingShip;\n  }\n\n  return { setHit, isHit, setOccupied, isOccupied, getOccupyingShip }\n}\n\nexport default Tile;","import {Ship} from './ship';\nimport Tile from './tile';\n\nconst Gameboard = (size) => {\n  let board = [];\n  for(let y = 0; y < size; y++) {\n    board[y] = [];\n    for(let x = 0; x < size; x++) {\n      board[y][x] = Tile();\n    }\n  }\n  let allShips = [];\n\n  const getBoardSize = () => size;\n\n  const getTile = (x, y) => board[x][y];\n\n  const positionIsOutOfBounds = (startPos, length) => {\n    if((startPos + length) > size) {\n      return true;\n    }\n    return false;\n  }\n\n  const positionIsAlreadyTaken = (x, y, axis, length) => {\n    if(axis === 'x') {\n      for(let i = x; i < (x + length); i++) {\n        if(board[i][y].isOccupied()) {\n          return true;\n        }\n      }\n    } else if(axis === 'y') {\n      for(let i = y; i < (y + length); i++) {\n        if(board[x][i].isOccupied()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  const positionIsLegal = (x, y, axis, length) => {\n    if(positionIsOutOfBounds(\n      (axis === 'x' ? x : y),\n      length\n    )) {\n      return false;\n    } else if(positionIsAlreadyTaken(x, y, axis, length)) {\n      return false;\n    }\n    return true;\n  }\n\n  const placeShip = (x, y, axis, length, name = '') => {\n    // Ensure that desired position is not out of bounds or taken already\n    if(!positionIsLegal(x, y, axis, length)) {\n      return false;\n    }\n\n    // If safe to place\n    // Firstly, create a new Ship() and add to allShips[]\n    let startPos = (axis === 'x' ? x : y);\n    let tilesOccupiedByShip = [];\n    for(let i = startPos; i < (startPos + length); i++) {\n      tilesOccupiedByShip.push(i);\n    }\n    let shipToBePlaced = Ship(tilesOccupiedByShip, axis, name);\n    allShips.push(shipToBePlaced);\n\n    // Then set the relevant board tiles to be occupied with the Ship()\n    for(let i = startPos; i < (startPos + length); i++) {\n      if(axis === 'x') {\n        board[i][y].setOccupied(true, shipToBePlaced);\n      } else if(axis === 'y') {\n        board[x][i].setOccupied(true, shipToBePlaced);\n      }\n    }\n\n    return true;\n  }\n\n  const receiveAttack = (x, y) => {\n    if(board[x][y].isHit()) {\n      return 'invalid';\n    } else {\n      board[x][y].setHit(true);\n\n      if(board[x][y].isOccupied()) {\n        board[x][y].getOccupyingShip().hit({\n          x,\n          y,\n        })\n        return 'hit';\n      } else {\n        return 'miss';\n      }\n    }\n  }\n\n  const canReceiveAttack = (x, y) => {\n    if(x < 0 || x >= size || y < 0 || y >= size) {\n      return false;\n    }\n    \n    if(board[x][y].isHit()) {\n      return false;\n    }\n    return true;\n  }\n\n  const allShipsSunk = () => {\n    for(let i = 0; i < allShips.length; i++) {\n      if(!allShips[i].isSunk()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const getAllSunkShipCoords = () => {\n    let coords = [];\n    for(let x = 0; x < size; x++) {\n      for(let y = 0; y < size; y++) {\n        if(board[x][y].isOccupied()) {\n          if(board[x][y].getOccupyingShip().isSunk()) {\n            coords.push({x: x, y: y});\n          }          \n        }        \n      }\n    }\n    return coords;\n  }\n\n  const getBoard = () => {\n    return board;\n  }\n\n  return { placeShip, receiveAttack, canReceiveAttack, getAllSunkShipCoords, getBoard, getBoardSize, getTile, allShipsSunk, positionIsLegal }\n}\n\nexport { Gameboard };","import {Gameboard} from './gameboard';\n\nconst Player = (name, boardSize) => {\n  const gameboard = Gameboard(boardSize);\n\n  const getName = () => {\n    return name;\n  }\n\n  const getGameboard = () => {\n    return gameboard;\n  }\n\n  return { gameboard, getName, getGameboard};\n}\n\nconst HumanPlayer = (name, boardSize) => {\n  const prototype = Player(name, boardSize);\n\n  return Object.assign(\n    {}, \n    prototype, \n    {}\n  )\n}\n\nconst ComputerPlayer = (name, boardSize) => {\n  const prototype = Player(name, boardSize);\n  let successfulCoordinates = [];\n  let lastSuccessfulDirection = null;\n\n  const getRandomArbitrary = (min, max) => {\n    return Math.random() * (max - min) + min;\n  }  \n\n  const fillGameboard = (shipsToFillWith) => {\n    let i = 0;\n    while(i < shipsToFillWith.length) {\n      let axis = (getRandomArbitrary(0, 50) > 24 ? 'x' : 'y');\n      let randomX = +(getRandomArbitrary(0, boardSize).toFixed(0));\n      let randomY = +(getRandomArbitrary(0, boardSize).toFixed(0));\n      try {\n        if(prototype.gameboard.positionIsLegal(randomX, randomY, axis, shipsToFillWith[i].length)) {\n          prototype.gameboard.placeShip(randomX, randomY, axis, shipsToFillWith[i].length, shipsToFillWith[i].name);\n          i++;\n        }\n      } catch(e) {\n        console.log(e);\n      }\n    }\n  }\n\n  function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  // Shuffle the successfulCoords array, then put the coords of the \n  // desired direction/axis to prioritise to the top so that it gets tried first\n  const shuffleThenPrioritiseDirection = (coordsToShuffle, directionToPrioritise, axisToPrioritise) => {\n    let prioritisedCoords = shuffle(coordsToShuffle);\n    if(axisToPrioritise !== null) {\n      let directionsToPrioritise = [];\n      if(axisToPrioritise === 'x') {\n        directionsToPrioritise = ['left', 'right'];\n      } else if(axisToPrioritise === 'y') {\n        directionsToPrioritise = ['up', 'down'];\n      }\n\n      let highRank = [];\n      let lowRank = [];\n      for(let i = 0; i < prioritisedCoords.length; i++) {\n        if(directionsToPrioritise.includes(prioritisedCoords[i].direction)) {\n          highRank.push(prioritisedCoords[i]);\n        } else {\n          lowRank.push(prioritisedCoords[i]);\n        }\n      }\n\n      prioritisedCoords = [...highRank, ...lowRank];\n    } else if(directionToPrioritise !== null) {\n      let coordsToPrioritise = prioritisedCoords.filter(coords => coords.direction === directionToPrioritise);\n      prioritisedCoords = prioritisedCoords.filter(coords => coords.direction !== directionToPrioritise);\n      prioritisedCoords.unshift(coordsToPrioritise[0]);\n    }    \n    return prioritisedCoords;\n  }\n\n  const makeRandomAttack = (gameboardToAttack) => {\n    let coordsAreInvalid = true;\n    let randomX = 0;\n    let randomY = 0;\n    do {\n      randomX = +(getRandomArbitrary(0, boardSize).toFixed(0));\n      randomY = +(getRandomArbitrary(0, boardSize).toFixed(0));\n      try {\n        if(gameboardToAttack.canReceiveAttack(randomX, randomY)) {\n          gameboardToAttack.receiveAttack(randomX, randomY);\n          if(gameboardToAttack.getTile(randomX, randomY).isOccupied()) {\n            let shipName = gameboardToAttack.getTile(randomX, randomY).getOccupyingShip().getName();\n            successfulCoordinates.unshift({x: randomX, y: randomY, name: shipName});\n          }\n          coordsAreInvalid = false;\n        }\n      } catch {\n        \n      }\n      \n    } while(coordsAreInvalid);\n\n    return {\n      x: randomX,\n      y: randomY\n    }\n  }\n\n  const detemineShipAxis = (coordToTry) => {\n    let coordsMatchingShipName = [];\n    for(let i = 0; i < successfulCoordinates.length; i++) {\n      if(successfulCoordinates[i].name === coordToTry.name) {\n        coordsMatchingShipName.push(successfulCoordinates[i]);\n      }\n    }\n\n    if(coordsMatchingShipName.length > 1) {\n      let xCoords = null;\n      let yCoords = null;\n      for(let i = 0; i < coordsMatchingShipName.length; i++) {\n        if(xCoords === null && yCoords === null) {\n          xCoords = coordsMatchingShipName[i].x;\n          yCoords = coordsMatchingShipName[i].y;\n        } else {\n          if(xCoords !== coordsMatchingShipName[i].x) {\n            return('x');\n          } else if(yCoords !== coordsMatchingShipName[i].y) {\n            return('y');\n          }\n        }\n      }\n    } else {\n      return null;\n    }\n    \n  }\n\n  const makeCalculatedAttack = (gameboardToAttack) => {\n    for(let j = 0; j < successfulCoordinates.length; j++) {\n      let coordsToTry = shuffleThenPrioritiseDirection([\n        {x: successfulCoordinates[j].x + 1, y: successfulCoordinates[j].y,      direction: 'right'},\n        {x: successfulCoordinates[j].x - 1, y: successfulCoordinates[j].y,      direction: 'left'},\n        {x: successfulCoordinates[j].x,     y: successfulCoordinates[j].y + 1,  direction: 'down'},\n        {x: successfulCoordinates[j].x,     y: successfulCoordinates[j].y - 1,  direction: 'up'},\n      ], lastSuccessfulDirection, detemineShipAxis(successfulCoordinates[j]));\n\n      // Try two of the values in coordsToTry\n      // By trying half of the total values, we allow the computer to still make random attacks\n      // This should give the computer more chance of winning\n      for(let i = 0; i < (coordsToTry.length / 2); i++) {\n        if(gameboardToAttack.canReceiveAttack(coordsToTry[i].x, coordsToTry[i].y)) {\n          gameboardToAttack.receiveAttack(coordsToTry[i].x, coordsToTry[i].y);\n          if(gameboardToAttack.getTile(coordsToTry[i].x, coordsToTry[i].y).isOccupied()) {\n            let shipName = gameboardToAttack.getTile(coordsToTry[i].x, coordsToTry[i].y).getOccupyingShip().getName();\n            successfulCoordinates.unshift({x: coordsToTry[i].x, y: coordsToTry[i].y, name: shipName});\n            lastSuccessfulDirection = coordsToTry[i].direction;\n          } else {\n            lastSuccessfulDirection = null;\n          }\n  \n          return {\n            x: coordsToTry[i].x,\n            y: coordsToTry[i].y\n          };\n        }\n      }\n    }\n\n    // If unable to make a calculated attack, make a random attack and return the results\n    return makeRandomAttack(gameboardToAttack);\n  }\n\n  // Method deletes all previously successful coords pertaining to sunk ships from the successful coordinates list\n  const getPrunedSuccessfulCoords = (gameboardToAttack) => {\n    let coordsToPrune = gameboardToAttack.getAllSunkShipCoords();\n    let prunedSuccessfulCoords = [];\n\n    for(let i = 0; i < successfulCoordinates.length; i++) {\n      let canAdd = true;\n\n      // Check if any previously successful coordinates pertain to sunk ships\n      // If so, prevent adding to pruned array\n      for(let j = 0; j < coordsToPrune.length; j++) {\n        if(successfulCoordinates[i].x === coordsToPrune[j].x &&\n          successfulCoordinates[i].y === coordsToPrune[j].y) {\n          canAdd = false;\n        }\n      }\n\n      // Check if already added to pruned array\n      // If so, prevent duplication \n      for(let k = 0; k < prunedSuccessfulCoords.length; k++) {\n        if(prunedSuccessfulCoords[k].x === successfulCoordinates[i].x &&\n           prunedSuccessfulCoords[k].y === successfulCoordinates[i].y) {\n          canAdd = false;\n        }\n      }\n\n      // If the above tests pass, add to the pruned array\n      if(canAdd) {\n        prunedSuccessfulCoords.push(successfulCoordinates[i]);\n      }\n    }\n\n    return prunedSuccessfulCoords;\n  }\n\n  const attackGameboard = (gameboardToAttack) => {\n    let coords = {};\n    if(successfulCoordinates.length > 0) {\n      coords = makeCalculatedAttack(gameboardToAttack);      \n    } else {\n      coords = makeRandomAttack(gameboardToAttack);\n    }\n    successfulCoordinates = getPrunedSuccessfulCoords(gameboardToAttack);\n    return coords;\n  }\n\n  return Object.assign(\n    {}, \n    prototype, \n    { attackGameboard, fillGameboard }\n  )\n}\n\nexport { Player, HumanPlayer, ComputerPlayer }","export default __webpack_public_path__ + \"static/media/nuclear-explosion.12e07038.svg\";","export default __webpack_public_path__ + \"static/media/water-drop.9d5bb6f0.svg\";","import React, {useState} from 'react';\nimport explosion from '../../assets/nuclear-explosion.svg';\nimport miss from '../../assets/water-drop.svg';\n\nfunction BoardTile(props) {\n  let classes = '';\n  if(props.isEnemy && !props.isHit) {\n    classes = \"gameboard-tile\";\n  } else {\n    classes = (props.isOccupied ? \"gameboard-tile-occupied\" : \"gameboard-tile\");\n  }\n  if(props.state === 'placing') {\n    if(props.isHoveringValid !== null) {\n      classes = (props.isHoveringValid ? classes += \" gameboard-tile-hover-valid\" : classes += \" gameboard-tile-hover-invalid\");\n    }\n  }\n  if(props.state === 'attacking') {\n    if(props.isHoveringValid !== null) {\n      classes = (props.isHoveringValid ? classes += \" gameboard-tile-hover-attack-valid\" : classes += \" gameboard-tile-hover-attack-invalid\");\n    }\n  }\n  let onClick = (props.onClick ? props.onClick : null);\n  let onMouseOver = (props.onMouseOver ? props.onMouseOver : null);\n\n  return(\n    <> \n      <div className={classes} \n           onMouseOver={onMouseOver}\n           onClick={onClick}> \n        {props.isHit && props.isOccupied ? <img src={explosion} className=\"hit\" /> : null}        \n        {props.isHit && !props.isOccupied ? <img src={miss} className=\"miss\" /> : null}        \n      </div>\n    </>\n  )\n}\n\nexport default BoardTile;","import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlacingShips(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  // Draw board on component mount\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [placed, props.placingShipAxis, props.shipName])\n\n  function placeShip(x, y) {\n    if(props.gameboard.positionIsLegal(x, y, props.placingShipAxis, props.placingShipLength)) {\n      props.gameboard.placeShip(x, y, props.placingShipAxis, props.placingShipLength, props.shipName);\n      setPlaced(placed + 1);\n      props.placeShipFunc(x, y);\n    }\n  }\n\n  let [coords, setCoords] = useState({x: 0, y: 0});\n\n  function redrawBoard(x = coords.x, y = coords.y) {\n    setCoords({x, y});\n    \n    let filledBoard = [];\n\n    // Firstly, draw the board and any occupied tiles\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        filledBoard[y][x] = <BoardTile  onClick={() => placeShip(x, y)} \n                                        onMouseOver={() => redrawBoard(x, y)} \n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHoveringValid={null}\n                                        state={\"placing\"} />\n      }\n    }\n\n    // Then, draw the current location of where the boat will be placed\n    // Set flags depending on whether the position is legal or not\n    let startPos = (props.placingShipAxis === 'x' ? x : y);\n    for(let i = startPos; i < (startPos + props.placingShipLength); i++) {\n      if(startPos <= props.gameboard.getBoardSize()) {\n        let isTilePositionValid = ( props.gameboard.positionIsLegal(x, y, props.placingShipAxis, props.placingShipLength)\n                                    ? true\n                                    : false);\n        let xx = 0, yy = 0;\n        if(props.placingShipAxis === 'x') {\n          xx = i;\n          yy = y;\n        } else if(props.placingShipAxis === 'y') {\n          xx = x;\n          yy = i;\n        }\n\n        if(xx < props.gameboard.getBoardSize() && yy < props.gameboard.getBoardSize()) {\n          filledBoard[yy][xx] = <BoardTile  onClick={() => placeShip(xx, yy)} \n                                            onMouseOver={() => redrawBoard(xx, yy)} \n                                            x={xx} \n                                            y={yy} \n                                            isOccupied={props.gameboard.getTile(xx, yy).isOccupied()} \n                                            isHoveringValid={isTilePositionValid}\n                                            state={\"placing\"} />\n        }\n      }\n    }\n    \n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        <div className=\"gameboard-placing-controls\">\n          <p className=\"coords\">Axis: {props.placingShipAxis} Coords: {coords.x} {coords.y} </p>\n          <button onClick={props.changeAxisFunc} onWheel={props.changeAxisFunc}>Change Axis</button>\n          <p className=\"smaller-p\">Or press Space to Change Axis</p>\n        </div>\n        \n         {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlacingShips;","import React, {useState, useEffect} from 'react';\nimport BoardPlacingShips from './boards/BoardPlacingShips';\n\nfunction BoatPlacer(props) {\n  let [boatsToPlace, setBoatsToPlace] = useState();\n  let [currentBoat, setCurrentBoat] = useState(0);\n  let [axis, setAxis] = useState('y');\n  let [eventListener, setEventListener] = useState(false);\n\n  useEffect(() => {\n    let boats = props.boats;\n    setBoatsToPlace([...boats]);\n\n    return(() => {\n      window.removeEventListener(\"keyup\", handleSpaceKey);\n      setEventListener(false);\n    })\n  }, []);\n\n  function handleSpaceKey(e) {\n    if(e.keyCode === 32) {\n      if(axis === 'x') {\n        setAxis('y');\n      } else if(axis === 'y') {\n        setAxis('x');\n      }\n      window.removeEventListener('keyup', handleSpaceKey);\n      setEventListener(false);\n    }  \n  }\n\n  useEffect(() => {\n    if(eventListener === false) {\n      setEventListener(true);\n      window.addEventListener('keyup', handleSpaceKey);\n    }\n  }, [eventListener]);\n\n  // If text changes, assume there is another player who needs to place boats\n  // And reset the necessary variables\n  useEffect(() => {\n    setCurrentBoat(0);\n  }, [props.text])\n\n  function placeShip(x, y) {\n    if(currentBoat < boatsToPlace.length) {\n      if(props.gameboard.positionIsLegal()) {\n        if((currentBoat + 1) < boatsToPlace.length) {\n          setCurrentBoat(currentBoat + 1);  \n        } else {\n          props.setScreen();\n        }               \n      }      \n    }\n  }\n\n  return(\n    <>\n      <div>\n        <p className=\"smaller-p\">{props.text}</p>\n        { boatsToPlace !== undefined\n        ? <>\n            <p className=\"smaller-p\">Currently Placing: {boatsToPlace[currentBoat].name}</p>\n            <BoardPlacingShips gameboard={props.gameboard}\n                placingShipLength={boatsToPlace[currentBoat].length}\n                placingShipAxis={axis} \n                shipName={boatsToPlace[currentBoat].name}\n                placeShipFunc={placeShip}\n                changeAxisFunc={() => axis === 'x' ? setAxis('y') : setAxis('x')}\n                />\n          </>\n        : <p>Setting up board...</p>}\n      </div>\n    </>\n  )\n}\n\nexport default BoatPlacer;","import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlayer(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  // Draw board on component mount\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [props.isEnabled])\n\n  function redrawBoard(dx = 0, dy = 0) {\n    let filledBoard = [];\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        let tileIsHit = false;\n        if(props.gameboard.getTile(x, y).isHit()) {\n          tileIsHit = true;\n        }\n        \n        filledBoard[y][x] = <BoardTile  onHover={() => redrawBoard(x, y)}\n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHit={tileIsHit} />\n      }\n    }\n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlayer;","import React, {useState, useEffect} from 'react';\nimport BoardTile from './BoardTile';\nimport './Board.css';\n\nfunction BoardPlayer(props) {\n  let [board, setBoard] = useState([]);\n  let [placed, setPlaced] = useState([]);\n\n  useEffect(() => {\n    redrawBoard();\n  }, [])\n\n  useEffect(() => {\n    redrawBoard();\n  }, [placed, props.isEnabled])\n\n  function processAttack(x, y) {\n    if(!props.isEnabled) {\n      return;\n    }\n\n    if(props.gameboard.canReceiveAttack(x, y)) {\n      setPlaced(placed + 1);\n      props.gameboard.receiveAttack(x, y);\n      props.receiveAttack(x, y);\n    }    \n  }\n\n  let [coords, setCoords] = useState({x: 0, y: 0});\n\n  function redrawBoard(dx = coords.x, dy = coords.y) {\n    setCoords({x: dx, y: dy});\n\n    let filledBoard = [];\n    for(let y = 0; y < props.gameboard.getBoardSize(); y++) {\n      filledBoard[y] = [];\n      for(let x = 0; x < props.gameboard.getBoardSize(); x++) { \n        let tileIsOccupied = false;\n        if(props.gameboard.getTile(x, y).isOccupied()) {\n          tileIsOccupied = true;\n        }\n        let tileIsHit = false;\n        if(props.gameboard.getTile(x, y).isHit()) {\n          tileIsHit = true;\n        }\n        let tileIsHovering = null;\n        if(dx === x && dy === y) {\n          if(props.gameboard.canReceiveAttack(x, y)) {\n            tileIsHovering = true;\n          } else {\n            tileIsHovering = false;\n          }\n        }\n        filledBoard[y][x] = <BoardTile  onMouseOver={() => redrawBoard(x, y)}\n                                        onClick={() => props.isEnabled ? processAttack(x, y) : null}\n                                        x={x} \n                                        y={y}\n                                        isOccupied={tileIsOccupied}\n                                        isHoveringValid={tileIsHovering}\n                                        isHit={tileIsHit}\n                                        state=\"attacking\"\n                                        isEnemy={true} />\n      }\n    }\n    setBoard([...filledBoard]);\n  }\n\n  return(\n    <> \n      <div className=\"gameboard\">\n        {board}\n      </div>\n    </>\n  )\n}\n\nexport default BoardPlayer;","export default function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}  ","import React, {useState, useEffect} from 'react';\nimport BoardPlayer from './boards/BoardPlayer';\nimport BoardEnemy from './boards/BoardEnemy';\nimport getRandomNumber from '../game/getRandomNumber';\n\nfunction GameLoopVsAI(props) {\n  let [playerAttacking, setPlayerAttacking] = useState(1);\n  let [isEnabled, setIsEnabled] = useState(true);\n  let [gameFinished, setGameFinished] = useState(false);\n  let [text, setText] = useState([<p>{`Righty ho Commander ${props.playerOne.getName()}, it's time to show these muppets what we're made of. Good luck, and don't let us down!`}</p>])\n  let [consecutiveMisses, setConsecutiveMisses]= useState(0);\n  let [enemyConsecutiveMisses, setEnemyConsecutiveMisses]= useState(0);\n\n  function addTextToLog(textToAdd, classes='', bigText = false) {\n    let newTextLog = text;\n    if(bigText) {\n      newTextLog.unshift(<h3 className={classes}>{textToAdd}</h3>);\n    } else {\n      newTextLog.unshift(<p className={classes}>{textToAdd}</p>);\n    }    \n    if(newTextLog.length > 10) {\n      newTextLog.pop();\n    }\n    setText(newTextLog);\n  }\n\n  // When playerAttacking changes, tell the AI to make its next shot, and add relevant message to the log\n  useEffect(() => {\n    if(playerAttacking === 2 && !gameFinished) {\n      setIsEnabled(false);\n      setTimeout(() => {\n        let attackedCoords = props.playerTwo.attackGameboard(props.playerOne.getGameboard());\n        if(props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).isOccupied()) {\n          let ship = props.playerOne.getGameboard().getTile(attackedCoords.x, attackedCoords.y).getOccupyingShip();\n          if(ship.isSunk()) {\n            addTextToLog(`Bugger, the enemy sunk our ${ship.getName()}!`, 'warning');\n          } else {\n            let choice = getRandomNumber(0, 50);\n            (choice > 0 && choice < 24) ? addTextToLog(`Ouch, the enemy hit our ${ship.getName()}!`) : addTextToLog(`Oof, they've landed a shot on our ${ship.getName()}!`);\n          }          \n          setEnemyConsecutiveMisses(0);\n        } else {\n          if(enemyConsecutiveMisses === 1) { // 2 times\n            addTextToLog(`Our pitiful enemy has missed us twice in a row!`);\n          } else if(enemyConsecutiveMisses === 3) { // 4 times\n            addTextToLog(`Commander ${props.playerTwo.getName()} is laughable, that's 4 times they've missed us now!`);\n          } else if(enemyConsecutiveMisses === 7) { // 8 times\n            addTextToLog(`Oh my... could it be a record? Commander ${props.playerTwo.getName()} has missed us 8 times in a row!`);\n          } else if(enemyConsecutiveMisses === 9) { // 10 times\n            addTextToLog(`OK, nope, that's the record. Ten enemy shots in a row, and not one of them hit us! Awkward!`);\n          }        \n          setEnemyConsecutiveMisses(enemyConsecutiveMisses + 1);\n        }\n\n        setIsEnabled(true);\n        if(props.playerOne.getGameboard().allShipsSunk()) {\n          addTextToLog(`We've lost the battle! Cmdr ${props.playerTwo.getName()} has blown all our ships to pieces. Fancy another go, Cmdr ${props.playerOne.getName()}?`, 'game-log-loss');\n          addTextToLog(`YOU LOST!`, 'game-log-loss-header', true);\n          \n          setIsEnabled(false);\n          setGameFinished(true);\n        } else {\n          setPlayerAttacking(1);\n        }        \n      }, 500);      \n    }\n  }, [playerAttacking])\n\n  // Allows player to make attack against the AI, and adds relevant message to the log\n  function enemyReceivesAttack(x, y) {\n    if(props.playerTwo.getGameboard().getTile(x, y).isOccupied()) {\n      let ship = props.playerTwo.getGameboard().getTile(x, y).getOccupyingShip();\n      if(ship.isSunk()) {\n        addTextToLog(`Excellent work! We sunk their ${ship.getName()}!`, 'highlight');\n      } else {\n        let choice = getRandomNumber(0, 50);\n        (choice > 0 && choice < 24) ? addTextToLog(`Great shot! We hit their ${ship.getName()}!`) : addTextToLog(`Solid work! We landed a shot on their ${ship.getName()}!`);\n      }        \n      setConsecutiveMisses(0);\n    } else {\n      if(consecutiveMisses === 2) { // 3 times\n        addTextToLog(`We've missed the enemy three times in a row, get it together!`);\n      } else if(consecutiveMisses === 4) { // 5 times\n        addTextToLog(`You're not having much luck, are you Commander ${props.playerOne.getName()}? C'mon!`);\n      } else if(consecutiveMisses === 6) { // 7 times\n        addTextToLog(`7 misses in a row, Commander ${props.playerOne.getName()}? Quite frankly I expected better of you!`);\n      } else if(consecutiveMisses === 9) { // 10 times\n        addTextToLog(`Out of the 100 tiles on this board, you've somehow just missed a tenth of them in a row with no hits landed in between. I honestly have no words.`);\n      } else if(consecutiveMisses === 14) { // 15 times\n        addTextToLog(`15 consecutive shots. 15 consecutive misses. Dare I ask... Are you even trying to win, Commander ${props.playerOne.getName()}?!`);\n      }       \n      setConsecutiveMisses(consecutiveMisses + 1); \n    }\n\n    if(props.playerTwo.getGameboard().allShipsSunk()) {\n      addTextToLog(`The battle is won, we've sunk all of Cmdr ${props.playerTwo.getName()}'s ships! Jolly good job, Cmdr ${props.playerOne.getName()}!`, 'game-log-win');\n      addTextToLog(`YOU WON!`, 'game-log-win-header', true);\n      setGameFinished(true);\n      setIsEnabled(false);\n    } else {\n      setPlayerAttacking(2);\n    }\n  }\n\n  return(\n    <>\n      <div className=\"forty\">\n        <BoardPlayer gameboard={props.playerOne.getGameboard()}\n                     isEnabled={isEnabled}/>\n        <p className=\"white\">Commander {props.playerOne.getName()}</p>\n      </div>\n      <div className=\"twenty\">\n        <div className=\"game-log\">\n          <h3>Communications</h3>\n          {text !== undefined ? text.map(text => text) : null}\n        </div>\n        \n        {gameFinished ? <button onClick={() => props.globalSetScreen(0)} className=\"play-again\">Play again</button> : null}\n      </div>\n      <div className=\"forty\">\n        <BoardEnemy gameboard={props.playerTwo.getGameboard()}\n                    isEnabled={isEnabled}\n                    receiveAttack={enemyReceivesAttack}/>\n        <p className=\"white\">Commander {props.playerTwo.getName()}</p>\n      </div>\n    </>\n  )\n}\n\nexport default GameLoopVsAI;","import React, {useState, useEffect} from 'react';\nimport BoatPlacer from './BoatPlacer';\nimport GameLoopVsAI from './GameLoopVsAI';\n\nfunction GameDisplayVsAI(props) {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  let toDisplay = '';\n\n  useEffect(() => {\n    props.playerTwo.fillGameboard(props.boats);\n  }, [])\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <BoatPlacer text={\"You're in charge, Commander \" + props.playerOne.getName() + \"! Where shall we position our ships?\"}\n                               gameboard={props.playerOne.getGameboard()}\n                               setScreen={() => setCurrentScreen(1)}\n                               boats={props.boats}/>\n      break;\n    case 1: \n      toDisplay = <GameLoopVsAI playerOne={props.playerOne}\n                                playerTwo={props.playerTwo}\n                                globalSetScreen={props.globalSetScreen} />\n    default:\n      break;\n  }\n\n  return(\n    <>\n      <div>\n        {toDisplay}\n      </div>\n    </>\n  )\n}\n\nexport default GameDisplayVsAI;","import React, {useState, useEffect} from 'react';\nimport BoardPlayer from './boards/BoardPlayer';\nimport BoardEnemy from './boards/BoardEnemy';\nimport getRandomNumber from '../game/getRandomNumber';\n\nfunction GameLoopVsHuman(props) {\n  let [playerAttacking, setPlayerAttacking] = useState(1);\n  let [passDeviceButton, showPassDeviceButton] = useState(false);\n  let [passingDeviceScreen, showPassingDeviceScreen] = useState(false);\n  let [isEnabled, setIsEnabled] = useState(true);\n  let [gameFinished, setGameFinished] = useState(false);\n  let [text, setText] = useState([<p>{`Right then, it's Commander ${props.playerOne.getName()} vs. Commander ${props.playerTwo.getName()}. May the best fighter win - good luck!`}</p>])\n  let [p1ConsecutiveMisses, setP1ConsecutiveMisses]= useState(0);\n  let [p2ConsecutiveMisses, setP2ConsecutiveMisses]= useState(0);\n\n  function addTextToLog(textToAdd, classes='', bigText = false) {\n    let newTextLog = text;\n    if(bigText) {\n      newTextLog.unshift(<h3 className={classes}>{textToAdd}</h3>);\n    } else {\n      newTextLog.unshift(<p className={classes}>{textToAdd}</p>);\n    }    \n    if(newTextLog.length > 10) {\n      newTextLog.pop();\n    }\n    setText(newTextLog);\n  }\n\n  useEffect(() => {\n    if(passingDeviceScreen === true) {\n      setPlayerAttacking((playerAttacking === 1 ? 2 : 1));\n    } else if(passingDeviceScreen === false) {\n      setIsEnabled(true);\n      showPassDeviceButton(false);\n    }\n  }, [passingDeviceScreen])\n\n  function enemyReceivesAttack(x, y) {\n    let attackingPlayer = (playerAttacking === 1 ? props.playerOne : props.playerTwo);\n    let receivingPlayer = (playerAttacking === 1 ? props.playerTwo : props.playerOne);\n    if(receivingPlayer.getGameboard().getTile(x, y).isOccupied()) {\n      let ship = receivingPlayer.getGameboard().getTile(x, y).getOccupyingShip();\n      if(ship.isSunk()) {\n        addTextToLog(`BOOM! Commander ${attackingPlayer.getName()} just sunk Commander ${receivingPlayer.getName()}'s ${ship.getName()}!`, 'highlight');\n      } else {\n        let choice = getRandomNumber(0, 50);\n        (choice > 0 && choice < 24) ? addTextToLog(`Great shot Cmdr ${attackingPlayer.getName()}! You hit their ${ship.getName()}!`) : addTextToLog(`Solid work Cmdr ${attackingPlayer.getName()}! You landed a shot on their ${ship.getName()}!`);\n      }        \n      (playerAttacking === 1 ? setP1ConsecutiveMisses(0) : setP2ConsecutiveMisses(0));\n    } else {\n      let consecutiveMisses = (playerAttacking === 1 ? p1ConsecutiveMisses : p2ConsecutiveMisses);\n      if(consecutiveMisses === 2) { // 3 times\n        addTextToLog(`Cmdr ${attackingPlayer.getName()} has missed their enemy three times in a row, get it together!`);\n      } else if(consecutiveMisses === 4) { // 5 times\n        addTextToLog(`You're not having much luck, are you Cmdr ${attackingPlayer.getName()}? C'mon!`);\n      } else if(consecutiveMisses === 6) { // 7 times\n        addTextToLog(`7 misses in a row, Cmdr ${attackingPlayer.getName()}? Quite frankly I expected better of you!`);\n      } else if(consecutiveMisses === 9) { // 10 times\n        addTextToLog(`Out of the 100 tiles on this board, Cmdr ${attackingPlayer.getName()} somehow just missed a tenth of them in a row with no hits landed in between. I honestly have no words.`);\n      } else if(consecutiveMisses === 14) { // 15 times\n        addTextToLog(`15 consecutive shots. 15 consecutive misses. Dare I ask... Are you even trying to win, Cmdr ${attackingPlayer.getName()}?!`);\n      }       \n      (playerAttacking === 1 ? setP1ConsecutiveMisses(p1ConsecutiveMisses + 1) : setP2ConsecutiveMisses(p2ConsecutiveMisses + 1));\n    }\n\n    if(receivingPlayer.getGameboard().allShipsSunk()) {\n      addTextToLog(`The battle is won, Commander ${attackingPlayer.getName()} sunk all of Commander ${receivingPlayer.getName()}'s ships! Jolly good job, Commander ${attackingPlayer.getName()}!`, 'game-log-win');\n      addTextToLog(`Cmdr ${attackingPlayer.getName()} WINS!`, 'game-log-win-header', true);\n      setGameFinished(true);\n      setIsEnabled(false);\n    } else {\n      setIsEnabled(false);\n      showPassDeviceButton(true);\n    }\n  }\n\n  // Show a screen in between turns that the player must dismiss\n  // Ensures that players do not see each other's boards\n  if(passingDeviceScreen) {\n    return(\n      <div className=\"passing-device\">\n        <h3>Pass device to Commander {playerAttacking === 1 ? props.playerOne.getName() : props.playerTwo.getName()}...</h3>\n        <button onClick={() => showPassingDeviceScreen(false)}>Continue</button>\n      </div>\n    )\n  }\n\n  return(\n    <>\n      <div className=\"forty\">\n        <BoardPlayer gameboard={playerAttacking === 1 ? props.playerOne.getGameboard() : props.playerTwo.getGameboard()}\n                     isEnabled={isEnabled}/>\n        <p className=\"white\">Commander {playerAttacking === 1 ? props.playerOne.getName() : props.playerTwo.getName()}</p>\n      </div>\n      <div className=\"twenty\">\n        <div className=\"game-log\">\n          <h3>Communications</h3>\n          {text !== undefined ? text.map(text => text) : null}\n        </div>\n        \n        {gameFinished ? <button onClick={() => props.globalSetScreen(0)} className=\"play-again\">Play again</button> : null}\n        {passDeviceButton ? <button onClick={() => showPassingDeviceScreen(true)} className=\"pass-device\">Pass Device</button> : null}\n      </div>\n      <div className=\"forty\">\n        <BoardEnemy gameboard={playerAttacking === 1 ? props.playerTwo.getGameboard() : props.playerOne.getGameboard()}\n                    isEnabled={isEnabled}\n                    receiveAttack={enemyReceivesAttack}/>\n        <p className=\"white\">Commander {playerAttacking === 1 ? props.playerTwo.getName() : props.playerOne.getName()}</p>\n      </div>\n    </>\n  )\n}\n\nexport default GameLoopVsHuman;","import React, {useState, useEffect} from 'react';\nimport BoatPlacer from './BoatPlacer';\nimport GameLoopVsHuman from './GameLoopVsHuman';\n\nfunction GameDisplayVsHuman(props) {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  let toDisplay = '';\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <BoatPlacer text={\"You're up first, Commander \" + props.playerOne.getName() + \"! Where shall we position our ships?\"}\n                               gameboard={props.playerOne.getGameboard()}\n                               setScreen={() => setCurrentScreen(1)}\n                               boats={props.boats}/>\n      break;\n    case 1:\n      toDisplay = <BoatPlacer text={\"It's your turn now, Commander \" + props.playerTwo.getName() + \"! Where's best to position our ships?\"}\n                                gameboard={props.playerTwo.getGameboard()}\n                                setScreen={() => setCurrentScreen(2)}\n                                boats={props.boats}/>\n      break;\n    case 2: \n      toDisplay = <GameLoopVsHuman playerOne={props.playerOne}\n                                playerTwo={props.playerTwo}\n                                globalSetScreen={props.globalSetScreen} />\n    default:\n      break;\n  }\n\n  return(\n    <>\n      <div>\n        {toDisplay}\n      </div>\n    </>\n  )\n}\n\nexport default GameDisplayVsHuman;","import React, {useState} from 'react';\nimport {HumanPlayer, ComputerPlayer} from '../game/player';\nimport GameDisplayVsAI from './GameDisplayVsAI';\nimport GameDisplayVsHuman from './GameDisplayVsHuman';\n\nfunction GameDisplayRouter(props) {\n  const boats = [{name: 'Carrier', length: 5},\n  {name: 'Battleship', length: 4},\n  {name: 'Submarine', length: 3},\n  {name: 'Cruiser', length: 3},\n  {name: 'Destroyer', length: 2}];\n\n  let gameModeToDisplay;\n  let playerOne = HumanPlayer(props.p1Name, 10);\n  let playerTwo;\n  if(props.opponent === 'ai') {\n    playerTwo = ComputerPlayer(props.p2Name, 10);\n    gameModeToDisplay = <GameDisplayVsAI \n                         playerOne={playerOne} \n                         playerTwo={playerTwo}\n                         boats={boats}\n                         globalSetScreen={props.globalSetScreen}/>\n  } else {\n    playerTwo = HumanPlayer(props.p2Name, 10);\n    gameModeToDisplay = <GameDisplayVsHuman\n                          playerOne={playerOne} \n                          playerTwo={playerTwo}\n                          boats={boats}\n                          globalSetScreen={props.globalSetScreen} />\n  }\n\n  return(\n    <>\n      {gameModeToDisplay}\n    </>\n  )\n}\n\nexport default GameDisplayRouter;","import './App.css';\nimport './assets/sea.jpg'\nimport React, {useState} from 'react';\nimport SplashText from './components/splash/SplashText';\nimport SplashInput from './components/splash/SplashInput';\nimport GameDisplayRouter from './components/GameDisplayRouter';\n\nfunction App() {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  const [playerOneName, setPlayerOneName] = useState('Badman');\n  const [playerTwoName, setPlayerTwoName] = useState('Bigboy');\n  const [playerOnePreservedName, savePlayerOnePreservedName] = useState('');\n  const [playerTwoPreservedName, savePlayerTwoPreservedName] = useState('');\n  let toDisplay = '';\n\n  function setName(player, name) {\n    if(player === 1 && name.length > 0) {\n      setPlayerOneName(name);\n      savePlayerOnePreservedName(name);\n    } else if(player === 2 && name.length > 0) {\n      setPlayerTwoName(name);\n      savePlayerTwoPreservedName(name);\n    }\n  }\n\n  function setScreen(setTo) {\n    setCurrentScreen(setTo);\n  }\n\n  switch(currentScreen) {\n    case 0:\n      toDisplay = <SplashText textToShow=\"Welcome to Battleship. Ready to start?\"\n                              btn1Text=\"Begin Mission\"\n                              btn1Func={() => setScreen(1)} />\n      break;\n    \n    case 1:\n      toDisplay = <SplashText textToShow=\"Who will you be fighting today?\"\n                              btn1Text=\"Commander Puter (AI)\"\n                              btn1Func={() => setScreen(2)}\n                              btn2Text=\"A Friend (2-Player)\"\n                              btn2Func={() => setScreen(5)} />\n      break;\n\n    // Route: Playing AI\n    case 2:\n      toDisplay = <SplashText textToShow=\"Roger that, let's blow Commander Puter's fleet to smithereens!\"\n                              btn1Text=\"We'll teach him a bloody good lesson!\"\n                              btn1Func={() => setScreen(3)} />\n      break;\n\n    case 3:\n      toDisplay = <SplashInput textToShow=\"That we will, sir. But before we sail off, remind me of your name...\"\n                               inputPlaceholder=\"Your name, sir\"\n                               inputInitialValue={playerOnePreservedName}\n                               submitText=\"Battle\"\n                               submitFunc={(inputValue) => {\n                                 setScreen(4);\n                                 setName(1, inputValue);\n                               }} />\n      break;\n\n    case 4:\n      toDisplay = <GameDisplayRouter opponent=\"ai\"\n                                     p1Name={playerOneName} \n                                     p2Name=\"Puter\" \n                                     globalSetScreen={setScreen}\n                                     />\n      break;\n    \n    // Route: Playing Human\n    case 5:\n      toDisplay = <SplashText textToShow=\"Right, I want a clean fight... Joking, go blow each other's ships to smithereens.\"\n                              btn1Text=\"Let's 'ave it!\"\n                              btn1Func={() => setScreen(6)} />\n      break;\n\n    case 6:\n      toDisplay = <SplashInput textToShow=\"Okay, who's up first and what shall we call you?\"\n                               inputPlaceholder=\"P1's name, sir\"\n                               inputInitialValue={playerOnePreservedName}\n                               submitText=\"Battle\"\n                               submitFunc={(e, inputValue) => {\n                                 e.preventDefault();\n                                 setScreen(7);\n                                 setName(1, inputValue);\n                               }} />\n      break;\n\n    case 7:\n      toDisplay = <SplashInput textToShow=\"And for the second Commander, remind me of your name?\"\n                                inputPlaceholder=\"P2's name, sir\"\n                                inputInitialValue={playerTwoPreservedName}\n                                submitText=\"Battle\"\n                                submitFunc={(e, inputValue) => {\n                                  e.preventDefault();\n                                  setScreen(8);\n                                  setName(2, inputValue);\n                                }} />\n      break;\n    \n    case 8:\n      toDisplay = <GameDisplayRouter opponent=\"human\"\n                                      p1Name={playerOneName} \n                                      p2Name={playerTwoName} \n                                      globalSetScreen={setScreen}\n                                      />\n      break;\n  }\n\n  return(\n    <div className=\"App\">\n      <div className=\"wrap\">\n        { currentScreen < 4 \n          ? <h1>Battleship</h1>\n          : <h2>Battleship</h2> }\n        {toDisplay}\n      </div>\n    </div>    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './reset.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}